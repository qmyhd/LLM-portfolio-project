src\bot\__init__.py:19:15: W292 [*] No newline at end of file
   |
17 |     register_events(bot, twitter_client)
18 |     register_commands(bot, twitter_client)
19 |     return bot
   |               ^ W292
   |
   = help: Add trailing newline

src\bot\bot.py:9:89: E501 Line too long (91 > 88)
   |
 7 | from . import create_bot
 8 |
 9 | logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
   |                                                                                         ^^^ E501
10 | logger = logging.getLogger(__name__)
   |

src\bot\bot.py:16:1: W293 [*] Blank line contains whitespace
   |
14 |     load_dotenv()
15 |     config = settings()
16 |     
   | ^^^^ W293
17 |     token = config.DISCORD_BOT_TOKEN
18 |     if not token:
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:35:1: W293 [*] Blank line contains whitespace
   |
33 |     Maintains a queue of buy orders and processes sells against oldest purchases first.
34 |     """
35 |     
   | ^^^^ W293
36 |     def __init__(self):
37 |         self.buy_queue: List[Tuple[float, float, datetime]] = []  # [(shares, price, date), ...]
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:37:89: E501 Line too long (96 > 88)
   |
36 |     def __init__(self):
37 |         self.buy_queue: List[Tuple[float, float, datetime]] = []  # [(shares, price, date), ...]
   |                                                                                         ^^^^^^^^ E501
38 |         
39 |     def add_buy(self, shares: float, price: float, date: datetime) -> None:
   |

src\bot\commands\chart.py:38:1: W293 [*] Blank line contains whitespace
   |
36 |     def __init__(self):
37 |         self.buy_queue: List[Tuple[float, float, datetime]] = []  # [(shares, price, date), ...]
38 |         
   | ^^^^^^^^ W293
39 |     def add_buy(self, shares: float, price: float, date: datetime) -> None:
40 |         """Add a buy order to the position queue"""
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:42:1: W293 [*] Blank line contains whitespace
   |
40 |         """Add a buy order to the position queue"""
41 |         self.buy_queue.append((shares, price, date))
42 |         
   | ^^^^^^^^ W293
43 |     def process_sell(self, shares_sold: float, sell_price: float, sell_date: datetime) -> float:
44 |         """
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:43:89: E501 Line too long (96 > 88)
   |
41 |         self.buy_queue.append((shares, price, date))
42 |         
43 |     def process_sell(self, shares_sold: float, sell_price: float, sell_date: datetime) -> float:
   |                                                                                         ^^^^^^^^ E501
44 |         """
45 |         Process a sell order using FIFO method and calculate realized P/L.
   |

src\bot\commands\chart.py:46:1: W293 Blank line contains whitespace
   |
44 |         """
45 |         Process a sell order using FIFO method and calculate realized P/L.
46 |         
   | ^^^^^^^^ W293
47 |         Args:
48 |             shares_sold: Number of shares being sold
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:51:1: W293 Blank line contains whitespace
   |
49 |             sell_price: Price per share for the sale
50 |             sell_date: Date of the sale
51 |             
   | ^^^^^^^^^^^^ W293
52 |         Returns:
53 |             Total realized P/L for the sale (positive = profit, negative = loss)
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:57:1: W293 [*] Blank line contains whitespace
   |
55 |         total_pnl = 0.0
56 |         remaining_shares = shares_sold
57 |         
   | ^^^^^^^^ W293
58 |         while remaining_shares > 0 and self.buy_queue:
59 |             shares_available, buy_price, buy_date = self.buy_queue[0]
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:60:1: W293 [*] Blank line contains whitespace
   |
58 |         while remaining_shares > 0 and self.buy_queue:
59 |             shares_available, buy_price, buy_date = self.buy_queue[0]
60 |             
   | ^^^^^^^^^^^^ W293
61 |             if shares_available <= remaining_shares:
62 |                 # Use all shares from this buy lot
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:72:89: E501 Line too long (94 > 88)
   |
70 |                 total_pnl += pnl
71 |                 # Update the remaining shares in this lot
72 |                 self.buy_queue[0] = (shares_available - remaining_shares, buy_price, buy_date)
   |                                                                                         ^^^^^^ E501
73 |                 remaining_shares = 0
   |

src\bot\commands\chart.py:74:1: W293 [*] Blank line contains whitespace
   |
72 |                 self.buy_queue[0] = (shares_available - remaining_shares, buy_price, buy_date)
73 |                 remaining_shares = 0
74 |         
   | ^^^^^^^^ W293
75 |         return total_pnl
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:76:1: W293 [*] Blank line contains whitespace
   |
75 |         return total_pnl
76 |     
   | ^^^^ W293
77 |     def get_current_position(self) -> float:
78 |         """Get the total number of shares currently held"""
   |
   = help: Remove whitespace from blank line

src\bot\commands\chart.py:136:1: W293 Blank line contains whitespace
    |
134 |     """
135 |     Get moving averages based on period and interval combination.
136 |     
    | ^^^^ W293
137 |     For intervals >= 1 day, specific moving averages are applied:
138 |     - 1mo period & 1d intervals: mav=20
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:161:1: W293 [*] Blank line contains whitespace
    |
159 |     elif period == '10y' and interval == '1mo':
160 |         return [6, 12, 24]
161 |     
    | ^^^^ W293
162 |     # Default cases for other combinations
163 |     elif period == '5d':
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:167:1: W293 [*] Blank line contains whitespace
    |
165 |     elif period == 'max':
166 |         return [2, 4, 8]  # Keep original max config
167 |     
    | ^^^^ W293
168 |     # Fallback for any unspecified combinations
169 |     return []
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:185:1: W293 Blank line contains whitespace
    |
183 | def calculate_chart_date_range(period: str, end_date: Optional[datetime] = None):
184 |     """Calculate the chart's date range based on the selected period
185 |     
    | ^^^^ W293
186 |     Args:
187 |         period: Time period string ('5d', '1mo', etc.)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:189:1: W293 Blank line contains whitespace
    |
187 |         period: Time period string ('5d', '1mo', etc.)
188 |         end_date: End date for the chart (default: current date)
189 |         
    | ^^^^^^^^ W293
190 |     Returns:
191 |         tuple: (start_date, end_date) as datetime objects
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:195:1: W293 [*] Blank line contains whitespace
    |
193 |     if end_date is None:
194 |         end_date = datetime.now()
195 |     
    | ^^^^ W293
196 |     # Special case: use April 1st as start date for 3mo period
197 |     if period == '3mo':
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:221:1: W293 [*] Blank line contains whitespace
    |
219 |             # Default fallback
220 |             start_date = end_date - timedelta(days=30)
221 |     
    | ^^^^ W293
222 |     return start_date, end_date
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:225:89: E501 Line too long (100 > 88)
    |
225 | def query_trade_data(symbol: str, start_date: datetime, end_date: datetime, min_trade: float = 0.0):
    |                                                                                         ^^^^^^^^^^^^ E501
226 |     """Query trade data within the chart timeframe
    |

src\bot\commands\chart.py:227:1: W293 Blank line contains whitespace
    |
225 | def query_trade_data(symbol: str, start_date: datetime, end_date: datetime, min_trade: float = 0.0):
226 |     """Query trade data within the chart timeframe
227 |     
    | ^^^^ W293
228 |     Args:
229 |         symbol: Stock ticker symbol
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:231:43: W291 Trailing whitespace
    |
229 |         symbol: Stock ticker symbol
230 |         start_date: Start date for trade query
231 |         end_date: End date for trade query  
    |                                           ^^ W291
232 |         min_trade: Minimum trade size threshold
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:233:1: W293 Blank line contains whitespace
    |
231 |         end_date: End date for trade query  
232 |         min_trade: Minimum trade size threshold
233 |         
    | ^^^^^^^^ W293
234 |     Returns:
235 |         DataFrame containing trade data or empty DataFrame
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:239:1: W293 [*] Blank line contains whitespace
    |
237 |     try:
238 |         conn = get_connection()
239 |         
    | ^^^^^^^^ W293
240 |         # SQL query to select trade data
241 |         query = """
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:242:15: W291 Trailing whitespace
    |
240 |         # SQL query to select trade data
241 |         query = """
242 |         SELECT 
    |               ^ W291
243 |             extracted_symbol as symbol,
244 |             action,
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:249:20: W291 Trailing whitespace
    |
247 |             total_quantity,
248 |             (execution_price * total_quantity) as trade_value
249 |         FROM orders 
    |                    ^ W291
250 |         WHERE extracted_symbol = ? 
251 |         AND time_executed BETWEEN ? AND ?
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:250:35: W291 Trailing whitespace
    |
248 |             (execution_price * total_quantity) as trade_value
249 |         FROM orders 
250 |         WHERE extracted_symbol = ? 
    |                                   ^ W291
251 |         AND time_executed BETWEEN ? AND ?
252 |         AND status = 'executed'
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:256:1: W293 [*] Blank line contains whitespace
    |
254 |         ORDER BY time_executed ASC
255 |         """
256 |         
    | ^^^^^^^^ W293
257 |         # Convert dates to strings for SQL query
258 |         start_str = start_date.strftime('%Y-%m-%d')
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:260:1: W293 [*] Blank line contains whitespace
    |
258 |         start_str = start_date.strftime('%Y-%m-%d')
259 |         end_str = end_date.strftime('%Y-%m-%d')
260 |         
    | ^^^^^^^^ W293
261 |         df = pd.read_sql_query(query, conn, params=(symbol, start_str, end_str, min_trade))
262 |         conn.close()
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:261:89: E501 Line too long (91 > 88)
    |
259 |         end_str = end_date.strftime('%Y-%m-%d')
260 |         
261 |         df = pd.read_sql_query(query, conn, params=(symbol, start_str, end_str, min_trade))
    |                                                                                         ^^^ E501
262 |         conn.close()
    |

src\bot\commands\chart.py:263:1: W293 [*] Blank line contains whitespace
    |
261 |         df = pd.read_sql_query(query, conn, params=(symbol, start_str, end_str, min_trade))
262 |         conn.close()
263 |         
    | ^^^^^^^^ W293
264 |         # Convert execution_date to datetime if not empty
265 |         if not df.empty and 'execution_date' in df.columns:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:267:1: W293 [*] Blank line contains whitespace
    |
265 |         if not df.empty and 'execution_date' in df.columns:
266 |             df['execution_date'] = pd.to_datetime(df['execution_date'])
267 |         
    | ^^^^^^^^ W293
268 |         return df
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:269:1: W293 [*] Blank line contains whitespace
    |
268 |         return df
269 |         
    | ^^^^^^^^ W293
270 |     except Exception as e:
271 |         print(f"Error querying trade data: {e}")
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:278:1: W293 Blank line contains whitespace
    |
276 |     """
277 |     Process trade data and generate marker positions with FIFO P/L calculation.
278 |     
    | ^^^^ W293
279 |     Args:
280 |         trade_data: DataFrame containing trade information
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:282:1: W293 Blank line contains whitespace
    |
280 |         trade_data: DataFrame containing trade information
281 |         price_data: DataFrame containing OHLCV price data
282 |         
    | ^^^^^^^^ W293
283 |     Returns:
284 |         tuple: (addplot_list, label_data) for mplfinance chart and annotations
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:288:1: W293 [*] Blank line contains whitespace
    |
286 |     if trade_data.empty or price_data.empty:
287 |         return [], []
288 |     
    | ^^^^ W293
289 |     addplot_list = []
290 |     label_data = []  # [(date, price, text, action), ...]
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:291:1: W293 [*] Blank line contains whitespace
    |
289 |     addplot_list = []
290 |     label_data = []  # [(date, price, text, action), ...]
291 |     
    | ^^^^ W293
292 |     # Create marker series aligned with price data index
293 |     buy_markers = pd.Series(index=price_data.index, dtype=float)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:295:1: W293 [*] Blank line contains whitespace
    |
293 |     buy_markers = pd.Series(index=price_data.index, dtype=float)
294 |     sell_markers = pd.Series(index=price_data.index, dtype=float)
295 |     
    | ^^^^ W293
296 |     # Initialize FIFO position tracker
297 |     fifo_tracker = FIFOPositionTracker()
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:298:1: W293 [*] Blank line contains whitespace
    |
296 |     # Initialize FIFO position tracker
297 |     fifo_tracker = FIFOPositionTracker()
298 |     
    | ^^^^ W293
299 |     # Process trades chronologically (already ordered by time_executed ASC)
300 |     for _, trade in trade_data.iterrows():
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:305:1: W293 [*] Blank line contains whitespace
    |
303 |         shares = float(trade['total_quantity'])
304 |         price = float(trade['execution_price'])
305 |         
    | ^^^^^^^^ W293
306 |         # Find the closest price data date
307 |         price_dates = [idx.date() for idx in price_data.index]
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:310:1: W293 [*] Blank line contains whitespace
    |
308 |         closest_date = min(price_dates, key=lambda x: abs((x - trade_date).days))
309 |         closest_idx = None
310 |         
    | ^^^^^^^^ W293
311 |         # Find the index corresponding to closest date
312 |         for idx in price_data.index:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:316:1: W293 [*] Blank line contains whitespace
    |
314 |                 closest_idx = idx
315 |                 break
316 |         
    | ^^^^^^^^ W293
317 |         if closest_idx is not None:
318 |             # Process the trade and generate label
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:322:1: W293 [*] Blank line contains whitespace
    |
320 |                 # Add to FIFO tracker
321 |                 fifo_tracker.add_buy(shares, price, trade['execution_date'])
322 |                 
    | ^^^^^^^^^^^^^^^^ W293
323 |                 # Position buy markers slightly below the low price
324 |                 # Find the integer position for this date
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:329:1: W293 [*] Blank line contains whitespace
    |
327 |                 marker_price = low_price * 0.995
328 |                 buy_markers.loc[closest_idx] = marker_price
329 |                 
    | ^^^^^^^^^^^^^^^^ W293
330 |                 # Generate buy label: "shares @ $price"
331 |                 label_text = f"{shares:.0f} @ ${price:.2f}"
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:333:1: W293 [*] Blank line contains whitespace
    |
331 |                 label_text = f"{shares:.0f} @ ${price:.2f}"
332 |                 label_data.append((closest_idx, marker_price, label_text, 'buy'))
333 |                 
    | ^^^^^^^^^^^^^^^^ W293
334 |             elif action == 'sell':
335 |                 # Calculate FIFO P/L
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:336:89: E501 Line too long (96 > 88)
    |
334 |             elif action == 'sell':
335 |                 # Calculate FIFO P/L
336 |                 realized_pnl = fifo_tracker.process_sell(shares, price, trade['execution_date'])
    |                                                                                         ^^^^^^^^ E501
337 |                 
338 |                 # Position sell markers slightly above the high price
    |

src\bot\commands\chart.py:337:1: W293 [*] Blank line contains whitespace
    |
335 |                 # Calculate FIFO P/L
336 |                 realized_pnl = fifo_tracker.process_sell(shares, price, trade['execution_date'])
337 |                 
    | ^^^^^^^^^^^^^^^^ W293
338 |                 # Position sell markers slightly above the high price
339 |                 # Find the integer position for this date
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:344:1: W293 [*] Blank line contains whitespace
    |
342 |                 marker_price = high_price * 1.005
343 |                 sell_markers.loc[closest_idx] = marker_price
344 |                 
    | ^^^^^^^^^^^^^^^^ W293
345 |                 # Generate sell label: "shares @ $price (+/-$P/L)"
346 |                 pnl_sign = "+" if realized_pnl >= 0 else ""
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:347:89: E501 Line too long (91 > 88)
    |
345 |                 # Generate sell label: "shares @ $price (+/-$P/L)"
346 |                 pnl_sign = "+" if realized_pnl >= 0 else ""
347 |                 label_text = f"{shares:.0f} @ ${price:.2f} ({pnl_sign}${realized_pnl:.2f})"
    |                                                                                         ^^^ E501
348 |                 label_data.append((closest_idx, marker_price, label_text, 'sell'))
    |

src\bot\commands\chart.py:349:1: W293 [*] Blank line contains whitespace
    |
347 |                 label_text = f"{shares:.0f} @ ${price:.2f} ({pnl_sign}${realized_pnl:.2f})"
348 |                 label_data.append((closest_idx, marker_price, label_text, 'sell'))
349 |     
    | ^^^^ W293
350 |     # Create addplot objects for markers
351 |     if not buy_markers.dropna().empty:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:361:1: W293 [*] Blank line contains whitespace
    |
359 |         )
360 |         addplot_list.append(buy_plot)
361 |     
    | ^^^^ W293
362 |     if not sell_markers.dropna().empty:
363 |         sell_plot = mpf.make_addplot(
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:365:28: W291 [*] Trailing whitespace
    |
363 |         sell_plot = mpf.make_addplot(
364 |             sell_markers,
365 |             type='scatter', 
    |                            ^ W291
366 |             markersize=200,
367 |             marker='v',
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:372:1: W293 [*] Blank line contains whitespace
    |
370 |         )
371 |         addplot_list.append(sell_plot)
372 |     
    | ^^^^ W293
373 |     return addplot_list, label_data
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:376:89: E501 Line too long (108 > 88)
    |
376 | def create_cost_basis_line(symbol: str, start_date: datetime, end_date: datetime, price_data: pd.DataFrame):
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
377 |     """
378 |     Create cost basis line data for chart overlay using position analysis.
    |

src\bot\commands\chart.py:379:1: W293 Blank line contains whitespace
    |
377 |     """
378 |     Create cost basis line data for chart overlay using position analysis.
379 |     
    | ^^^^ W293
380 |     Args:
381 |         symbol: Stock ticker symbol
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:385:1: W293 Blank line contains whitespace
    |
383 |         end_date: Chart end date
384 |         price_data: DataFrame containing OHLCV price data
385 |         
    | ^^^^^^^^ W293
386 |     Returns:
387 |         tuple: (cost_basis_series, analysis_data) for chart overlay and metadata
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:392:1: W293 [*] Blank line contains whitespace
    |
390 |         # Get position analysis for the chart timeframe
391 |         analysis = analyze_position_history(symbol, start_date, end_date)
392 |         
    | ^^^^^^^^ W293
393 |         if 'error' in analysis or not analysis.get('timeline_data', {}).get('cost_basis_evolution'):
394 |             return None, None
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:393:89: E501 Line too long (100 > 88)
    |
391 |         analysis = analyze_position_history(symbol, start_date, end_date)
392 |         
393 |         if 'error' in analysis or not analysis.get('timeline_data', {}).get('cost_basis_evolution'):
    |                                                                                         ^^^^^^^^^^^^ E501
394 |             return None, None
    |

src\bot\commands\chart.py:395:1: W293 [*] Blank line contains whitespace
    |
393 |         if 'error' in analysis or not analysis.get('timeline_data', {}).get('cost_basis_evolution'):
394 |             return None, None
395 |         
    | ^^^^^^^^ W293
396 |         # Extract cost basis timeline
397 |         cost_timeline = analysis['timeline_data']['cost_basis_evolution']
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:398:1: W293 [*] Blank line contains whitespace
    |
396 |         # Extract cost basis timeline
397 |         cost_timeline = analysis['timeline_data']['cost_basis_evolution']
398 |         
    | ^^^^^^^^ W293
399 |         if not cost_timeline:
400 |             return None, None
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:401:1: W293 [*] Blank line contains whitespace
    |
399 |         if not cost_timeline:
400 |             return None, None
401 |         
    | ^^^^^^^^ W293
402 |         # Create cost basis series aligned with price data index
403 |         cost_basis_series = pd.Series(index=price_data.index, dtype=float)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:404:1: W293 [*] Blank line contains whitespace
    |
402 |         # Create cost basis series aligned with price data index
403 |         cost_basis_series = pd.Series(index=price_data.index, dtype=float)
404 |         
    | ^^^^^^^^ W293
405 |         # Fill cost basis values by finding closest dates
406 |         current_cost_basis = 0.0
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:407:1: W293 [*] Blank line contains whitespace
    |
405 |         # Fill cost basis values by finding closest dates
406 |         current_cost_basis = 0.0
407 |         
    | ^^^^^^^^ W293
408 |         for idx in price_data.index:
409 |             if hasattr(idx, 'date'):
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:413:1: W293 [*] Blank line contains whitespace
    |
411 |             else:
412 |                 price_date = pd.to_datetime(idx).date()
413 |             
    | ^^^^^^^^^^^^ W293
414 |             # Find the most recent cost basis update before or on this date
415 |             for cost_point in cost_timeline:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:421:1: W293 [*] Blank line contains whitespace
    |
419 |                 else:
420 |                     break
421 |             
    | ^^^^^^^^^^^^ W293
422 |             # Only add cost basis if it's greater than 0 (position exists)
423 |             if current_cost_basis > 0:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:425:1: W293 [*] Blank line contains whitespace
    |
423 |             if current_cost_basis > 0:
424 |                 cost_basis_series.at[idx] = current_cost_basis
425 |         
    | ^^^^^^^^ W293
426 |         # Clean up the series (remove NaN values while keeping structure)
427 |         cost_basis_series = cost_basis_series.dropna()
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:428:1: W293 [*] Blank line contains whitespace
    |
426 |         # Clean up the series (remove NaN values while keeping structure)
427 |         cost_basis_series = cost_basis_series.dropna()
428 |         
    | ^^^^^^^^ W293
429 |         if cost_basis_series.empty:
430 |             return None, None
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:431:1: W293 [*] Blank line contains whitespace
    |
429 |         if cost_basis_series.empty:
430 |             return None, None
431 |         
    | ^^^^^^^^ W293
432 |         return cost_basis_series, analysis
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:433:1: W293 [*] Blank line contains whitespace
    |
432 |         return cost_basis_series, analysis
433 |         
    | ^^^^^^^^ W293
434 |     except Exception as e:
435 |         print(f"Error creating cost basis line: {e}")
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:439:83: W291 [*] Trailing whitespace
    |
439 | def save_chart_metadata_to_db(symbol: str, period: str, interval: str, theme: str, 
    |                                                                                   ^ W291
440 |                               file_path: str, trade_count: int, min_trade_size: float):
441 |     """
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:443:1: W293 Blank line contains whitespace
    |
441 |     """
442 |     Save chart metadata to the stock_charts table.
443 |     
    | ^^^^ W293
444 |     Args:
445 |         symbol: Stock ticker symbol
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:455:1: W293 [*] Blank line contains whitespace
    |
453 |     try:
454 |         from src.db import execute_sql
455 |         
    | ^^^^^^^^ W293
456 |         current_timestamp = datetime.now().isoformat()
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:457:1: W293 [*] Blank line contains whitespace
    |
456 |         current_timestamp = datetime.now().isoformat()
457 |         
    | ^^^^^^^^ W293
458 |         execute_sql('''
459 |         INSERT OR IGNORE INTO stock_charts 
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:459:43: W291 Trailing whitespace
    |
458 |         execute_sql('''
459 |         INSERT OR IGNORE INTO stock_charts 
    |                                           ^ W291
460 |         (symbol, period, interval, theme, file_path, created_at, trade_count, min_trade_size)
461 |         VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:460:89: E501 Line too long (93 > 88)
    |
458 |         execute_sql('''
459 |         INSERT OR IGNORE INTO stock_charts 
460 |         (symbol, period, interval, theme, file_path, created_at, trade_count, min_trade_size)
    |                                                                                         ^^^^^ E501
461 |         VALUES (?, ?, ?, ?, ?, ?, ?, ?)
462 |         ''', (symbol, period, interval, theme, file_path, current_timestamp, trade_count, min_trade_size))
    |

src\bot\commands\chart.py:462:89: E501 Line too long (106 > 88)
    |
460 |         (symbol, period, interval, theme, file_path, created_at, trade_count, min_trade_size)
461 |         VALUES (?, ?, ?, ?, ?, ?, ?, ?)
462 |         ''', (symbol, period, interval, theme, file_path, current_timestamp, trade_count, min_trade_size))
    |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
463 |         
464 |         print(f"Γ£à Saved chart metadata for {symbol} to database")
    |

src\bot\commands\chart.py:463:1: W293 [*] Blank line contains whitespace
    |
461 |         VALUES (?, ?, ?, ?, ?, ?, ?, ?)
462 |         ''', (symbol, period, interval, theme, file_path, current_timestamp, trade_count, min_trade_size))
463 |         
    | ^^^^^^^^ W293
464 |         print(f"Γ£à Saved chart metadata for {symbol} to database")
465 |     except Exception as e:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:472:1: W293 Blank line contains whitespace
    |
470 |     """
471 |     Create and return the directory path for storing charts organized by symbol.
472 |     
    | ^^^^ W293
473 |     Args:
474 |         symbol: Stock ticker symbol
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:475:1: W293 Blank line contains whitespace
    |
473 |     Args:
474 |         symbol: Stock ticker symbol
475 |         
    | ^^^^^^^^ W293
476 |     Returns:
477 |         Path object for the chart directory
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:488:1: W293 Blank line contains whitespace
    |
486 |     """
487 |     Generate a unique chart filename with timestamp.
488 |     
    | ^^^^ W293
489 |     Args:
490 |         symbol: Stock ticker symbol
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:492:32: W291 Trailing whitespace
    |
490 |         symbol: Stock ticker symbol
491 |         period: Time period
492 |         interval: Data interval  
    |                                ^^ W291
493 |         theme: Chart theme
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:494:1: W293 Blank line contains whitespace
    |
492 |         interval: Data interval  
493 |         theme: Chart theme
494 |         
    | ^^^^^^^^ W293
495 |     Returns:
496 |         Formatted filename string
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:504:89: E501 Line too long (163 > 88)
    |
502 | ΓÇª
503 | ΓÇª
504 | ΓÇªperiod: str = "1mo", theme: str = "discord", min_trade: float = 0.0, interval: Optional[str] = None):
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
505 | ΓÇª
506 | ΓÇª
    |

src\bot\commands\chart.py:507:1: W293 Blank line contains whitespace
    |
505 |         """
506 |         Create a stock chart with specified parameters.
507 |         
    | ^^^^^^^^ W293
508 |         Args:
509 |             symbol: Stock ticker symbol (required)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:521:89: E501 Line too long (94 > 88)
    |
519 |                          "`!chart TSLA 3mo` - 3 month chart\n"
520 |                          "`!chart NVDA 1y` - 1 year chart\n"
521 |                          "`!chart AAPL 1y discord 0.0 5d` - 1 year chart with 5d interval\n\n"
    |                                                                                         ^^^^^^ E501
522 |                          "**Available periods:** 5d, 1mo, 3mo, 6mo, 1y, 2y, 10y, max\n"
523 |                          "**Available themes:** discord\n"
    |

src\bot\commands\chart.py:526:1: W293 [*] Blank line contains whitespace
    |
524 |                          "**Available intervals:** 30m, 1h, 1d, 5d, 1wk, 1mo, 3mo")
525 |             return
526 |         
    | ^^^^^^^^ W293
527 |         # Convert symbol to uppercase
528 |         symbol = symbol.upper()
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:529:1: W293 [*] Blank line contains whitespace
    |
527 |         # Convert symbol to uppercase
528 |         symbol = symbol.upper()
529 |         
    | ^^^^^^^^ W293
530 |         # Validate period
531 |         if period not in PERIOD_CONFIG:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:535:1: W293 [*] Blank line contains whitespace
    |
533 |                          "**Available periods:** " + ", ".join(PERIOD_CONFIG.keys()))
534 |             return
535 |         
    | ^^^^^^^^ W293
536 |         # Validate theme
537 |         if theme not in STYLES:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:541:1: W293 [*] Blank line contains whitespace
    |
539 |                          "**Available themes:** " + ", ".join(STYLES.keys()))
540 |             return
541 |         
    | ^^^^^^^^ W293
542 |         # Get configuration for this period
543 |         config = PERIOD_CONFIG[period]
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:545:1: W293 [*] Blank line contains whitespace
    |
543 |         config = PERIOD_CONFIG[period]
544 |         base_interval = config['interval']
545 |         
    | ^^^^^^^^ W293
546 |         # Use custom interval if provided and valid, otherwise use default
547 |         valid_intervals = ['30m', '1h', '1d', '5d', '1wk', '1mo', '3mo']
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:557:90: E501 Line too long (132 > 88)
    |
555 | ΓÇª] else None
556 | ΓÇªid interval
557 | ΓÇª: Invalid interval '{interval}', using default '{base_interval}' for {period} period")
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
558 | ΓÇª
559 | ΓÇª
    |

src\bot\commands\chart.py:558:1: W293 [*] Blank line contains whitespace
    |
556 | ΓÇª         if interval:  # User provided invalid interval
557 | ΓÇª             await ctx.send(f"ΓÜá∩╕Å **Warning**: Invalid interval '{interval}', using default '{base_interval}' for {period} period")
558 | ΓÇª     
    ^^^^^^^^ W293
559 | ΓÇª     # Determine chart settings
560 | ΓÇª     chart_type = get_chart_type(final_interval)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:563:1: W293 [*] Blank line contains whitespace
    |
561 |         show_volume = should_show_volume(period)
562 |         style = STYLES[theme]
563 |         
    | ^^^^^^^^ W293
564 |         # Create organized chart directory and generate unique filename
565 |         chart_dir = create_chart_directory(symbol)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:568:1: W293 [*] Blank line contains whitespace
    |
566 |         chart_filename = generate_chart_filename(symbol, period, final_interval, theme)
567 |         chart_filepath = chart_dir / chart_filename
568 |         
    | ^^^^^^^^ W293
569 |         # Variables for metadata tracking
570 |         trade_count = 0
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:572:1: W293 [*] Blank line contains whitespace
    |
570 |         trade_count = 0
571 |         chart_saved_successfully = False
572 |         
    | ^^^^^^^^ W293
573 |         try:
574 |             # Send typing indicator
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:578:1: W293 [*] Blank line contains whitespace
    |
576 |                 # Calculate date range for trade data querying
577 |                 start_date, end_date = calculate_chart_date_range(period)
578 |                 
    | ^^^^^^^^^^^^^^^^ W293
579 |                 # Download price data with enhanced error handling
580 |                 try:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:582:1: W293 [*] Blank line contains whitespace
    |
580 |                 try:
581 |                     data = yf.download(symbol, period=period, interval=final_interval)
582 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
583 |                     if data is None or data.empty:
584 |                         await ctx.send(f"Γ¥î **Market Data Error**: Could not find price data for **{symbol}**\n"
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:584:88: E501 Line too long (112 > 88)
    |
583 |                     if data is None or data.empty:
584 |                         await ctx.send(f"Γ¥î **Market Data Error**: Could not find price data for **{symbol}**\n"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^ E501
585 |                                      f"ΓÇó Symbol may be invalid or delisted\n"
586 |                                      f"ΓÇó Market may be closed for this symbol\n"
    |

src\bot\commands\chart.py:587:89: E501 Line too long (103 > 88)
    |
585 |                                      f"ΓÇó Symbol may be invalid or delisted\n"
586 |                                      f"ΓÇó Market may be closed for this symbol\n"
587 |                                      f"ΓÇó Try checking the symbol spelling or using a different symbol")
    |                                                                                         ^^^^^^^^^^^^^^^ E501
588 |                         return
    |

src\bot\commands\chart.py:589:1: W293 [*] Blank line contains whitespace
    |
587 |                                      f"ΓÇó Try checking the symbol spelling or using a different symbol")
588 |                         return
589 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^ W293
590 |                 except Exception as yf_error:
591 |                     await ctx.send(f"Γ¥î **yfinance API Error**: Failed to fetch data for **{symbol}**\n"
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:591:88: E501 Line too long (104 > 88)
    |
590 |                 except Exception as yf_error:
591 |                     await ctx.send(f"Γ¥î **yfinance API Error**: Failed to fetch data for **{symbol}**\n"
    |                                                                                         ^^^^^^^^^^^^^^^^ E501
592 |                                  f"ΓÇó Error: {str(yf_error)}\n"
593 |                                  f"ΓÇó This may be a temporary API issue\n"
    |

src\bot\commands\chart.py:596:1: W293 [*] Blank line contains whitespace
    |
594 |                                  f"ΓÇó Please try again in a few moments")
595 |                     return
596 |                 
    | ^^^^^^^^^^^^^^^^ W293
597 |                 # Query trade data for overlays
598 |                 trade_data = query_trade_data(symbol, start_date, end_date, min_trade)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:600:1: W293 [*] Blank line contains whitespace
    |
598 |                 trade_data = query_trade_data(symbol, start_date, end_date, min_trade)
599 |                 trade_count = len(trade_data) if not trade_data.empty else 0
600 |                 
    | ^^^^^^^^^^^^^^^^ W293
601 |                 # Process trade markers with FIFO P/L calculation
602 |                 addplot_list, label_data = process_trade_markers(trade_data, data)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:603:1: W293 [*] Blank line contains whitespace
    |
601 |                 # Process trade markers with FIFO P/L calculation
602 |                 addplot_list, label_data = process_trade_markers(trade_data, data)
603 |                 
    | ^^^^^^^^^^^^^^^^ W293
604 |                 # Create cost basis line if position data exists
605 |                 cost_basis_series, position_analysis = create_cost_basis_line(symbol, start_date, end_date, data)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:605:89: E501 Line too long (113 > 88)
    |
604 |                 # Create cost basis line if position data exists
605 |                 cost_basis_series, position_analysis = create_cost_basis_line(symbol, start_date, end_date, data)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
606 |                 if cost_basis_series is not None and not cost_basis_series.empty:
607 |                     # Add cost basis line to addplot_list
    |

src\bot\commands\chart.py:618:1: W293 [*] Blank line contains whitespace
    |
616 |                     )
617 |                     addplot_list.append(cost_basis_plot)
618 |                 
    | ^^^^^^^^^^^^^^^^ W293
619 |                 # Prepare plot arguments
620 |                 plot_kwargs = {
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:628:1: W293 [*] Blank line contains whitespace
    |
626 |                     'title': f"{symbol} - {period.upper()} Chart ({theme} theme)"
627 |                 }
628 |                 
    | ^^^^^^^^^^^^^^^^ W293
629 |                 # Add moving averages if specified
630 |                 if mav:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:632:1: W293 [*] Blank line contains whitespace
    |
630 |                 if mav:
631 |                     plot_kwargs['mav'] = mav
632 |                 
    | ^^^^^^^^^^^^^^^^ W293
633 |                 # Add trade markers if available
634 |                 if addplot_list:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:636:1: W293 [*] Blank line contains whitespace
    |
634 |                 if addplot_list:
635 |                     plot_kwargs['addplot'] = addplot_list
636 |                 
    | ^^^^^^^^^^^^^^^^ W293
637 |                 # Plot chart and get figure/axes
638 |                 fig, axes = mpf.plot(data, **plot_kwargs)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:639:1: W293 [*] Blank line contains whitespace
    |
637 |                 # Plot chart and get figure/axes
638 |                 fig, axes = mpf.plot(data, **plot_kwargs)
639 |                 
    | ^^^^^^^^^^^^^^^^ W293
640 |                 # Add text annotations for trade labels
641 |                 if label_data and len(axes) > 0:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:644:1: W293 [*] Blank line contains whitespace
    |
642 |                     # Get the main price chart axis (usually axes[0])
643 |                     ax = axes[0] if hasattr(axes, '__len__') else axes
644 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
645 |                     for date_idx, y_pos, text, action in label_data:
646 |                         # Convert pandas timestamp to matplotlib date number
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:648:1: W293 [*] Blank line contains whitespace
    |
646 |                         # Convert pandas timestamp to matplotlib date number
647 |                         x_pos = date_idx.to_pydatetime()
648 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^ W293
649 |                         # Position labels based on action
650 |                         if action == 'buy':
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:658:1: W293 [*] Blank line contains whitespace
    |
656 |                             va = 'bottom'
657 |                             y_offset = 0.002   # Small positive offset
658 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^ W293
659 |                         # Add text annotation with semi-transparent background
660 |                         ax.annotate(
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:677:1: W293 [*] Blank line contains whitespace
    |
675 |                             )
676 |                         )
677 |                 
    | ^^^^^^^^^^^^^^^^ W293
678 |                 # Add enhanced annotations from position analysis
679 |                 if position_analysis and len(axes) > 0:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:680:89: E501 Line too long (95 > 88)
    |
678 |                 # Add enhanced annotations from position analysis
679 |                 if position_analysis and len(axes) > 0:
680 |                     enhanced_annotations = create_enhanced_chart_annotations(position_analysis)
    |                                                                                         ^^^^^^^ E501
681 |                     ax = axes[0] if hasattr(axes, '__len__') else axes
    |

src\bot\commands\chart.py:682:1: W293 [*] Blank line contains whitespace
    |
680 |                     enhanced_annotations = create_enhanced_chart_annotations(position_analysis)
681 |                     ax = axes[0] if hasattr(axes, '__len__') else axes
682 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
683 |                     for annotation in enhanced_annotations:
684 |                         if annotation.get('date') and annotation.get('text'):
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:687:89: E501 Line too long (93 > 88)
    |
685 | ΓÇª                     try:
686 | ΓÇª                         # Convert date to datetime if needed
687 | ΓÇª                         ann_date = pd.to_datetime(annotation['date']).to_pydatetime()
    |                                                                                   ^^^^^ E501
688 | ΓÇª                         
689 | ΓÇª                         # Position annotation at top of chart
    |

src\bot\commands\chart.py:688:1: W293 [*] Blank line contains whitespace
    |
686 | ΓÇª                     # Convert date to datetime if needed
687 | ΓÇª                     ann_date = pd.to_datetime(annotation['date']).to_pydatetime()
688 | ΓÇª                     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^ W293
689 | ΓÇª                     # Position annotation at top of chart
690 | ΓÇª                     y_max = ax.get_ylim()[1]
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:692:1: W293 [*] Blank line contains whitespace
    |
690 | ΓÇª                     y_max = ax.get_ylim()[1]
691 | ΓÇª                     y_pos = y_max * 0.95  # 95% from bottom
692 | ΓÇª                     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^ W293
693 | ΓÇª                     # Color based on annotation type
694 | ΓÇª                     color = '#FFD700' if annotation.get('type') == 'cost_basis' else '#00c853'
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:694:89: E501 Line too long (106 > 88)
    |
693 | ΓÇª                     # Color based on annotation type
694 | ΓÇª                     color = '#FFD700' if annotation.get('type') == 'cost_basis' else '#00c853'
    |                                                                               ^^^^^^^^^^^^^^^^^^ E501
695 | ΓÇª                     if annotation.get('type') == 'total_pnl' and annotation.get('value', 0) < 0:
696 | ΓÇª                         color = '#ff1744'  # Red for negative P/L
    |

src\bot\commands\chart.py:695:89: E501 Line too long (108 > 88)
    |
693 | ΓÇª                     # Color based on annotation type
694 | ΓÇª                     color = '#FFD700' if annotation.get('type') == 'cost_basis' else '#00c853'
695 | ΓÇª                     if annotation.get('type') == 'total_pnl' and annotation.get('value', 0) < 0:
    |                                                                               ^^^^^^^^^^^^^^^^^^^^ E501
696 | ΓÇª                         color = '#ff1744'  # Red for negative P/L
    |

src\bot\commands\chart.py:697:1: W293 [*] Blank line contains whitespace
    |
695 | ΓÇª                     if annotation.get('type') == 'total_pnl' and annotation.get('value', 0) < 0:
696 | ΓÇª                         color = '#ff1744'  # Red for negative P/L
697 | ΓÇª                     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^ W293
698 | ΓÇª                     ax.annotate(
699 | ΓÇª                         annotation['text'],
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:717:1: W293 [*] Blank line contains whitespace
    |
715 |                                 print(f"Error adding annotation: {ann_error}")
716 |                                 continue
717 |                 
    | ^^^^^^^^^^^^^^^^ W293
718 |                 # Save the figure with enhanced error handling
719 |                 try:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:725:88: E501 Line too long (103 > 88)
    |
723 |                 except Exception as save_error:
724 |                     plt.close(fig)  # Ensure figure is closed even on error
725 |                     await ctx.send(f"Γ¥î **File System Error**: Failed to save chart for **{symbol}**\n"
    |                                                                                         ^^^^^^^^^^^^^^^ E501
726 |                                  f"ΓÇó Error: {str(save_error)}\n"
727 |                                  f"ΓÇó Check disk space and file permissions\n"
    |

src\bot\commands\chart.py:730:1: W293 [*] Blank line contains whitespace
    |
728 |                                  f"ΓÇó Chart directory: {chart_dir}")
729 |                     return
730 |                 
    | ^^^^^^^^^^^^^^^^ W293
731 |                 # Log chart metadata to database if save was successful
732 |                 if chart_saved_successfully:
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:735:39: W291 [*] Trailing whitespace
    |
733 |                     save_chart_metadata_to_db(
734 |                         symbol=symbol,
735 |                         period=period, 
    |                                       ^ W291
736 |                         interval=final_interval,
737 |                         theme=theme,
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:742:1: W293 [*] Blank line contains whitespace
    |
740 |                         min_trade_size=min_trade
741 |                     )
742 |                 
    | ^^^^^^^^^^^^^^^^ W293
743 |                 # Prepare response message with trade info and chart metadata
744 |                 trade_info = ""
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:750:87: E501 Line too long (95 > 88)
    |
748 |                     total_trades = len(trade_data)
749 |                     if total_trades > 0:
750 |                         trade_info = f" | ≡ƒö║{len(buy_trades)} buys, ≡ƒö╗{len(sell_trades)} sells"
    |                                                                                         ^^^^^^^ E501
751 |                         if len(label_data) > 0:
752 |                             trade_info += " | P/L calculated"
    |

src\bot\commands\chart.py:753:1: W293 [*] Blank line contains whitespace
    |
751 |                         if len(label_data) > 0:
752 |                             trade_info += " | P/L calculated"
753 |                 
    | ^^^^^^^^^^^^^^^^ W293
754 |                 # Add position analysis info if available
755 |                 position_info = ""
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:759:88: E501 Line too long (92 > 88)
    |
757 |                     summary = position_analysis['position_summary']
758 |                     if summary.get('current_shares', 0) > 0:
759 |                         position_info = f" | ≡ƒôê Pos: {summary['current_shares']:.0f} shares"
    |                                                                                         ^^^^ E501
760 |                         if cost_basis_series is not None and not cost_basis_series.empty:
761 |                             position_info += " | ≡ƒÆ░ Cost basis line shown"
    |

src\bot\commands\chart.py:760:89: E501 Line too long (89 > 88)
    |
758 |                     if summary.get('current_shares', 0) > 0:
759 |                         position_info = f" | ≡ƒôê Pos: {summary['current_shares']:.0f} shares"
760 |                         if cost_basis_series is not None and not cost_basis_series.empty:
    |                                                                                         ^ E501
761 |                             position_info += " | ≡ƒÆ░ Cost basis line shown"
    |

src\bot\commands\chart.py:762:1: W293 [*] Blank line contains whitespace
    |
760 |                         if cost_basis_series is not None and not cost_basis_series.empty:
761 |                             position_info += " | ≡ƒÆ░ Cost basis line shown"
762 |                 
    | ^^^^^^^^^^^^^^^^ W293
763 |                 # Add chart metadata info
764 |                 chart_info = f" | Saved: {chart_filename}"
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:765:1: W293 [*] Blank line contains whitespace
    |
763 |                 # Add chart metadata info
764 |                 chart_info = f" | Saved: {chart_filename}"
765 |                 
    | ^^^^^^^^^^^^^^^^ W293
766 |                 # Send chart with enhanced messaging
767 |                 await ctx.send(f"≡ƒôê **{symbol}** - {period.upper()} Chart ({theme} theme){trade_info}{position_info}{chart_info}", 
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:767:88: E501 Line too long (131 > 88)
    |
766 |                 # Send chart with enhanced messaging
767 |                 await ctx.send(f"≡ƒôê **{symbol}** - {period.upper()} Chart ({theme} theme){trade_info}{position_info}{chart_info}", 
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
768 |                              file=discord.File(chart_filepath))
    |

src\bot\commands\chart.py:767:130: W291 [*] Trailing whitespace
    |
766 |                 # Send chart with enhanced messaging
767 |                 await ctx.send(f"≡ƒôê **{symbol}** - {period.upper()} Chart ({theme} theme){trade_info}{position_info}{chart_info}", 
    |                                                                                                                                   ^ W291
768 |                              file=discord.File(chart_filepath))
    |
    = help: Remove trailing whitespace

src\bot\commands\chart.py:769:1: W293 [*] Blank line contains whitespace
    |
767 |                 await ctx.send(f"≡ƒôê **{symbol}** - {period.upper()} Chart ({theme} theme){trade_info}{position_info}{chart_info}", 
768 |                              file=discord.File(chart_filepath))
769 |                 
    | ^^^^^^^^^^^^^^^^ W293
770 |         except Exception as e:
771 |             await ctx.send(f"Γ¥î **Unexpected Error** creating chart for **{symbol}**\n"
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:775:1: W293 [*] Blank line contains whitespace
    |
773 |                          f"ΓÇó Please check the symbol and try again\n"
774 |                          f"ΓÇó If the problem persists, contact support")
775 |         
    | ^^^^^^^^ W293
776 |         finally:
777 |             # Clean up temporary files (keep organized charts in directory)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:784:89: E501 Line too long (96 > 88)
    |
782 |             else:
783 |                 # If there was an error and a temporary file exists, clean it up
784 |                 temp_chart_path = Path(chart_filename) if 'chart_filename' in locals() else None
    |                                                                                         ^^^^^^^^ E501
785 |                 if temp_chart_path and temp_chart_path.exists():
786 |                     try:
    |

src\bot\commands\chart.py:795:1: W293 Blank line contains whitespace
    |
793 |         """
794 |         Analyze position history and performance for a stock symbol.
795 |         
    | ^^^^^^^^ W293
796 |         Args:
797 |             symbol: Stock ticker symbol (required)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:807:1: W293 [*] Blank line contains whitespace
    |
805 |                          "`!position NVDA max` - All-time position analysis")
806 |             return
807 |         
    | ^^^^^^^^ W293
808 |         # Convert symbol to uppercase
809 |         symbol = symbol.upper()
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:810:1: W293 [*] Blank line contains whitespace
    |
808 |         # Convert symbol to uppercase
809 |         symbol = symbol.upper()
810 |         
    | ^^^^^^^^ W293
811 |         # Validate period
812 |         valid_periods = ['1mo', '3mo', '6mo', '1y', '2y', 'max']
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:817:1: W293 [*] Blank line contains whitespace
    |
815 |                          "**Available periods:** " + ", ".join(valid_periods))
816 |             return
817 |         
    | ^^^^^^^^ W293
818 |         try:
819 |             async with ctx.typing():
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:822:1: W293 [*] Blank line contains whitespace
    |
820 |                 # Calculate date range for analysis
821 |                 start_date, end_date = calculate_chart_date_range(period)
822 |                 
    | ^^^^^^^^^^^^^^^^ W293
823 |                 # Generate position report
824 |                 report = generate_position_report(symbol, start_date, end_date)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:825:1: W293 [*] Blank line contains whitespace
    |
823 |                 # Generate position report
824 |                 report = generate_position_report(symbol, start_date, end_date)
825 |                 
    | ^^^^^^^^^^^^^^^^ W293
826 |                 # Check if report indicates an error or no data
827 |                 if report.startswith("Γ¥î"):
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:833:1: W293 [*] Blank line contains whitespace
    |
831 |                                  f"ΓÇó Try a longer period if you have older trades")
832 |                     return
833 |                 
    | ^^^^^^^^^^^^^^^^ W293
834 |                 # Send the position analysis report
835 |                 await ctx.send(report)
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:836:1: W293 [*] Blank line contains whitespace
    |
834 | ΓÇª     # Send the position analysis report
835 | ΓÇª     await ctx.send(report)
836 | ΓÇª     
^^^^^^^^^^^^ W293
837 | ΓÇª     # Also provide a suggestion for chart viewing
838 | ΓÇª     await ctx.send(f"≡ƒÆí **Tip**: Use `!chart {symbol} {period}` to see the visual chart with trade markers and cost basis line!")
    |
    = help: Remove whitespace from blank line

src\bot\commands\chart.py:838:88: E501 Line too long (141 > 88)
    |
837 | ΓÇªrt viewing
838 | ΓÇªhart {symbol} {period}` to see the visual chart with trade markers and cost basis line!")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
839 | ΓÇª
840 | ΓÇª
    |

src\bot\commands\chart.py:839:1: W293 [*] Blank line contains whitespace
    |
837 | ΓÇª             # Also provide a suggestion for chart viewing
838 | ΓÇª             await ctx.send(f"≡ƒÆí **Tip**: Use `!chart {symbol} {period}` to see the visual chart with trade markers and cost basis liΓÇª
839 | ΓÇª             
    ^^^^^^^^^^^^^^^^ W293
840 | ΓÇª     except Exception as e:
841 | ΓÇª         await ctx.send(f"Γ¥î **Error analyzing position for {symbol}**\n"
    |
    = help: Remove whitespace from blank line

src\bot\commands\history.py:24:89: E501 Line too long (135 > 88)
   |
22 |         existing_message_ids = set()
23 |         try:
24 |             results = execute_sql("SELECT message_id FROM discord_messages WHERE channel = ?", (ctx.channel.name,), fetch_results=True)
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
25 |             existing_message_ids = {row[0] for row in results}
26 |         except Exception as e:
   |

src\bot\commands\history.py:45:1: W293 [*] Blank line contains whitespace
   |
43 |             if str(msg.id) in existing_message_ids:
44 |                 continue  # Skip messages that are already logged
45 |             
   | ^^^^^^^^^^^^ W293
46 |             # Log to database (preferred method)
47 |             log_message_to_database(msg, twitter_client)
   |
   = help: Remove whitespace from blank line

src\bot\commands\history.py:49:1: W293 [*] Blank line contains whitespace
   |
47 |             log_message_to_database(msg, twitter_client)
48 |             count += 1
49 |             
   | ^^^^^^^^^^^^ W293
50 |         await ctx.send(f"Γ£à Logged {count} fresh messages from #{ctx.channel} to database.")
   |
   = help: Remove whitespace from blank line

src\bot\commands\history.py:50:88: E501 Line too long (92 > 88)
   |
48 |             count += 1
49 |             
50 |         await ctx.send(f"Γ£à Logged {count} fresh messages from #{ctx.channel} to database.")
   |                                                                                         ^^^^ E501
   |

src\bot\commands\process.py:17:1: W293 Blank line contains whitespace
   |
15 |         """
16 |         Process Discord messages for the current channel into cleaned database.
17 |         
   | ^^^^^^^^ W293
18 |         Usage: !process [channel_type]
19 |         - channel_type: 'general' or 'trading' (default: general)
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:22:88: E501 Line too long (110 > 88)
   |
20 |         """
21 |         try:
22 |             await ctx.send(f"≡ƒöä Processing Discord data for #{ctx.channel.name} as {channel_type} channel...")
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^ E501
23 |             
24 |             # Process the current channel
   |

src\bot\commands\process.py:23:1: W293 [*] Blank line contains whitespace
   |
21 |         try:
22 |             await ctx.send(f"≡ƒöä Processing Discord data for #{ctx.channel.name} as {channel_type} channel...")
23 |             
   | ^^^^^^^^^^^^ W293
24 |             # Process the current channel
25 |             processing_result = process_channel(ctx.channel.name, channel_type)
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:26:1: W293 [*] Blank line contains whitespace
   |
24 |             # Process the current channel
25 |             processing_result = process_channel(ctx.channel.name, channel_type)
26 |             
   | ^^^^^^^^^^^^ W293
27 |             if processing_result["success"]:
28 |                 if processing_result["processed_count"] > 0:
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:32:89: E501 Line too long (97 > 88)
   |
30 |                                  f"ΓÇó Channel: #{ctx.channel.name}\n"
31 |                                  f"ΓÇó Type: {channel_type}\n"
32 |                                  f"ΓÇó Processed: {processing_result['processed_count']} messages")
   |                                                                                         ^^^^^^^^^ E501
33 |                 else:
34 |                     await ctx.send(f"Γä╣∩╕Å **No New Messages**\n"
   |

src\bot\commands\process.py:40:89: E501 Line too long (91 > 88)
   |
38 |                 await ctx.send(f"Γ¥î **Processing Failed**\n"
39 |                              f"ΓÇó Channel: #{ctx.channel.name}\n"
40 |                              f"ΓÇó Error: {processing_result.get('error', 'Unknown error')}")
   |                                                                                         ^^^ E501
41 |                              
42 |         except Exception as e:
   |

src\bot\commands\process.py:41:1: W293 [*] Blank line contains whitespace
   |
39 |                              f"ΓÇó Channel: #{ctx.channel.name}\n"
40 |                              f"ΓÇó Error: {processing_result.get('error', 'Unknown error')}")
41 |                              
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ W293
42 |         except Exception as e:
43 |             await ctx.send(f"Γ¥î **Error processing channel data**\n"
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:51:1: W293 Blank line contains whitespace
   |
49 |         """
50 |         Show statistics for the current Discord channel.
51 |         
   | ^^^^^^^^ W293
52 |         Usage: !stats
53 |         """
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:56:1: W293 [*] Blank line contains whitespace
   |
54 |         try:
55 |             await ctx.send("≡ƒôè Fetching channel statistics...")
56 |             
   | ^^^^^^^^^^^^ W293
57 |             stats = get_channel_stats(ctx.channel.name)
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:58:1: W293 [*] Blank line contains whitespace
   |
57 |             stats = get_channel_stats(ctx.channel.name)
58 |             
   | ^^^^^^^^^^^^ W293
59 |             if not stats or all(v == 0 for v in stats.values()):
60 |                 await ctx.send("Γä╣∩╕Å No processed channel data found. Use `!process` to process current channel first.")
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:60:90: E501 Line too long (117 > 88)
   |
59 |             if not stats or all(v == 0 for v in stats.values()):
60 |                 await ctx.send("Γä╣∩╕Å No processed channel data found. Use `!process` to process current channel first.")
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
61 |                 return
   |

src\bot\commands\process.py:62:1: W293 [*] Blank line contains whitespace
   |
60 |                 await ctx.send("Γä╣∩╕Å No processed channel data found. Use `!process` to process current channel first.")
61 |                 return
62 |             
   | ^^^^^^^^^^^^ W293
63 |             await ctx.send(f"≡ƒôè **Channel Statistics: #{ctx.channel.name}**\n"
64 |                          f"ΓÇó Raw Messages: {stats['raw_messages']}\n"
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:68:1: W293 [*] Blank line contains whitespace
   |
66 |                          f"ΓÇó Trading Processed: {stats['trading_processed']}\n"
67 |                          f"ΓÇó Twitter Data: {stats['twitter_data']}")
68 |                          
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ W293
69 |         except Exception as e:
70 |             await ctx.send(f"Γ¥î **Error fetching statistics**\n"
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:78:1: W293 Blank line contains whitespace
   |
76 |         """
77 |         Show statistics for all processed Discord channels.
78 |         
   | ^^^^^^^^ W293
79 |         Usage: !globalstats
80 |         """
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:83:1: W293 [*] Blank line contains whitespace
   |
81 |         try:
82 |             await ctx.send("≡ƒôè Fetching global statistics...")
83 |             
   | ^^^^^^^^^^^^ W293
84 |             stats = get_channel_stats()  # No specific channel = global stats
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:85:1: W293 [*] Blank line contains whitespace
   |
84 |             stats = get_channel_stats()  # No specific channel = global stats
85 |             
   | ^^^^^^^^^^^^ W293
86 |             if not stats or all(v == 0 for v in stats.values()):
87 |                 await ctx.send("Γä╣∩╕Å No processed data found. Use `!process` to process channels first.")
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:87:90: E501 Line too long (102 > 88)
   |
86 |             if not stats or all(v == 0 for v in stats.values()):
87 |                 await ctx.send("Γä╣∩╕Å No processed data found. Use `!process` to process channels first.")
   |                                                                                         ^^^^^^^^^^^^^^ E501
88 |                 return
   |

src\bot\commands\process.py:89:1: W293 [*] Blank line contains whitespace
   |
87 |                 await ctx.send("Γä╣∩╕Å No processed data found. Use `!process` to process channels first.")
88 |                 return
89 |             
   | ^^^^^^^^^^^^ W293
90 |             await ctx.send(f"≡ƒôè **Global Statistics**\n"
91 |                          f"ΓÇó Total Raw Messages: {stats['raw_messages']}\n"
   |
   = help: Remove whitespace from blank line

src\bot\commands\process.py:95:1: W293 [*] Blank line contains whitespace
   |
93 |                          f"ΓÇó Total Trading Processed: {stats['trading_processed']}\n"
94 |                          f"ΓÇó Total Twitter Data: {stats['twitter_data']}")
95 |                          
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ W293
96 |         except Exception as e:
97 |             await ctx.send(f"Γ¥î **Error fetching global statistics**\n"
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:19:89: E501 Line too long (89 > 88)
   |
17 |                 # Show data for specific symbol
18 |                 rows = execute_sql("""
19 |                     SELECT discord_date, tweet_date, content, stock_tags, author, channel
   |                                                                                         ^ E501
20 |                     FROM twitter_data 
21 |                     WHERE stock_tags LIKE ?
   |

src\bot\commands\twitter_cmd.py:20:38: W291 Trailing whitespace
   |
18 |                 rows = execute_sql("""
19 |                     SELECT discord_date, tweet_date, content, stock_tags, author, channel
20 |                     FROM twitter_data 
   |                                      ^ W291
21 |                     WHERE stock_tags LIKE ?
22 |                     ORDER BY discord_date DESC
   |
   = help: Remove trailing whitespace

src\bot\commands\twitter_cmd.py:25:1: W293 [*] Blank line contains whitespace
   |
23 |                     LIMIT 10
24 |                 """, (f"%{symbol.upper()}%",), fetch_results=True)
25 |                 
   | ^^^^^^^^^^^^^^^^ W293
26 |                 if not rows:
27 |                     await ctx.send(f"≡ƒôè No Twitter data found for **${symbol.upper()}**")
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:27:88: E501 Line too long (89 > 88)
   |
26 |                 if not rows:
27 |                     await ctx.send(f"≡ƒôè No Twitter data found for **${symbol.upper()}**")
   |                                                                                         ^ E501
28 |                     return
   |

src\bot\commands\twitter_cmd.py:29:1: W293 [*] Blank line contains whitespace
   |
27 |                     await ctx.send(f"≡ƒôè No Twitter data found for **${symbol.upper()}**")
28 |                     return
29 |                 
   | ^^^^^^^^^^^^^^^^ W293
30 |                 response = f"≡ƒôè **Twitter Data for ${symbol.upper()}** (Last 10)\n\n"
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:31:1: W293 [*] Blank line contains whitespace
   |
30 |                 response = f"≡ƒôè **Twitter Data for ${symbol.upper()}** (Last 10)\n\n"
31 |                 
   | ^^^^^^^^^^^^^^^^ W293
32 |                 for row in rows:
33 |                     discord_date, tweet_date, content, stock_tags, author, channel = row
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:35:89: E501 Line too long (94 > 88)
   |
33 |                     discord_date, tweet_date, content, stock_tags, author, channel = row
34 |                     # Truncate content if too long
35 |                     display_content = content[:100] + "..." if len(content) > 100 else content
   |                                                                                         ^^^^^^ E501
36 |                     response += f"**@{author}** in #{channel}\n"
37 |                     response += f"ΓÇó {display_content}\n"
   |

src\bot\commands\twitter_cmd.py:38:89: E501 Line too long (119 > 88)
   |
36 |                     response += f"**@{author}** in #{channel}\n"
37 |                     response += f"ΓÇó {display_content}\n"
38 |                     response += f"ΓÇó Discord: {discord_date[:10]} | Tweet: {tweet_date[:10] if tweet_date else 'N/A'}\n"
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
39 |                     response += f"ΓÇó Stocks: {stock_tags}\n\n"
   |

src\bot\commands\twitter_cmd.py:40:1: W293 [*] Blank line contains whitespace
   |
38 |                     response += f"ΓÇó Discord: {discord_date[:10]} | Tweet: {tweet_date[:10] if tweet_date else 'N/A'}\n"
39 |                     response += f"ΓÇó Stocks: {stock_tags}\n\n"
40 |                     
   | ^^^^^^^^^^^^^^^^^^^^ W293
41 |                     # Check if response is getting too long
42 |                     if len(response) > 1500:
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:45:1: W293 [*] Blank line contains whitespace
   |
43 |                         await ctx.send(response)
44 |                         response = ""
45 |                 
   | ^^^^^^^^^^^^^^^^ W293
46 |                 if response:
47 |                     await ctx.send(response)
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:48:1: W293 [*] Blank line contains whitespace
   |
46 |                 if response:
47 |                     await ctx.send(response)
48 |                     
   | ^^^^^^^^^^^^^^^^^^^^ W293
49 |             else:
50 |                 # Show general Twitter stats
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:55:38: W291 Trailing whitespace
   |
53 |                            COUNT(DISTINCT stock_tags) as unique_stocks,
54 |                            COUNT(DISTINCT channel) as channels
55 |                     FROM twitter_data 
   |                                      ^ W291
56 |                     WHERE stock_tags IS NOT NULL AND stock_tags != ''
57 |                 """, fetch_results=True)
   |
   = help: Remove trailing whitespace

src\bot\commands\twitter_cmd.py:58:1: W293 [*] Blank line contains whitespace
   |
56 |                     WHERE stock_tags IS NOT NULL AND stock_tags != ''
57 |                 """, fetch_results=True)
58 |                 
   | ^^^^^^^^^^^^^^^^ W293
59 |                 if stats_rows:
60 |                     try:
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:65:1: W293 [*] Blank line contains whitespace
   |
63 |                         await ctx.send("Γ¥î Error retrieving Twitter data statistics")
64 |                         return
65 |                     
   | ^^^^^^^^^^^^^^^^^^^^ W293
66 |                     # Get most mentioned stocks
67 |                     top_stocks = execute_sql("""
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:69:42: W291 Trailing whitespace
   |
67 |                     top_stocks = execute_sql("""
68 |                         SELECT stock_tags, COUNT(*) as mentions
69 |                         FROM twitter_data 
   |                                          ^ W291
70 |                         WHERE stock_tags IS NOT NULL AND stock_tags != ''
71 |                         GROUP BY stock_tags
   |
   = help: Remove trailing whitespace

src\bot\commands\twitter_cmd.py:75:1: W293 [*] Blank line contains whitespace
   |
73 |                         LIMIT 5
74 |                     """, fetch_results=True)
75 |                     
   | ^^^^^^^^^^^^^^^^^^^^ W293
76 |                     response = "≡ƒôè **Twitter Data Summary**\n"
77 |                     response += f"ΓÇó Total Tweets: {total}\n"
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:80:1: W293 [*] Blank line contains whitespace
   |
78 |                     response += f"ΓÇó Unique Stocks: {unique_stocks}\n"
79 |                     response += f"ΓÇó Channels: {channels}\n\n"
80 |                     
   | ^^^^^^^^^^^^^^^^^^^^ W293
81 |                     if top_stocks:
82 |                         response += "**Top Mentioned Stocks:**\n"
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:85:1: W293 [*] Blank line contains whitespace
   |
83 |                         for stock, count in top_stocks:
84 |                             response += f"ΓÇó {stock}: {count} mentions\n"
85 |                     
   | ^^^^^^^^^^^^^^^^^^^^ W293
86 |                     await ctx.send(response)
87 |                 else:
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:89:1: W293 [*] Blank line contains whitespace
   |
87 |                 else:
88 |                     await ctx.send("≡ƒôè No Twitter data found in database")
89 |                     
   | ^^^^^^^^^^^^^^^^^^^^ W293
90 |         except Exception as e:
91 |             await ctx.send(f"Γ¥î **Error fetching Twitter data**: {str(e)}")
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:97:1: W293 Blank line contains whitespace
   |
95 |         """
96 |         Get recent tweets for a stock symbol from database.
97 |         
   | ^^^^^^^^ W293
98 |         Usage: !tweets [AAPL] [count]
99 |         - symbol: Stock symbol (optional)
   |
   = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:107:1: W293 [*] Blank line contains whitespace
    |
105 |             elif count < 1:
106 |                 count = 5
107 |             
    | ^^^^^^^^^^^^ W293
108 |             if symbol:
109 |                 # Show tweets for specific symbol
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:112:89: E501 Line too long (89 > 88)
    |
110 |                 symbol = symbol.upper().replace('$', '')
111 |                 rows = execute_sql("""
112 |                     SELECT discord_date, tweet_date, content, author, channel, stock_tags
    |                                                                                         ^ E501
113 |                     FROM twitter_data 
114 |                     WHERE stock_tags LIKE ?
    |

src\bot\commands\twitter_cmd.py:113:38: W291 Trailing whitespace
    |
111 |                 rows = execute_sql("""
112 |                     SELECT discord_date, tweet_date, content, author, channel, stock_tags
113 |                     FROM twitter_data 
    |                                      ^ W291
114 |                     WHERE stock_tags LIKE ?
115 |                     ORDER BY discord_date DESC
    |
    = help: Remove trailing whitespace

src\bot\commands\twitter_cmd.py:118:1: W293 [*] Blank line contains whitespace
    |
116 |                     LIMIT ?
117 |                 """, (f"%{symbol}%", count), fetch_results=True)
118 |                 
    | ^^^^^^^^^^^^^^^^ W293
119 |                 header = f"≡ƒÉª **Recent Tweets for ${symbol}**"
120 |             else:
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:123:89: E501 Line too long (89 > 88)
    |
121 |                 # Show recent tweets for all symbols
122 |                 rows = execute_sql("""
123 |                     SELECT discord_date, tweet_date, content, author, channel, stock_tags
    |                                                                                         ^ E501
124 |                     FROM twitter_data 
125 |                     ORDER BY discord_date DESC
    |

src\bot\commands\twitter_cmd.py:124:38: W291 Trailing whitespace
    |
122 |                 rows = execute_sql("""
123 |                     SELECT discord_date, tweet_date, content, author, channel, stock_tags
124 |                     FROM twitter_data 
    |                                      ^ W291
125 |                     ORDER BY discord_date DESC
126 |                     LIMIT ?
    |
    = help: Remove trailing whitespace

src\bot\commands\twitter_cmd.py:128:1: W293 [*] Blank line contains whitespace
    |
126 |                     LIMIT ?
127 |                 """, (count,), fetch_results=True)
128 |                 
    | ^^^^^^^^^^^^^^^^ W293
129 |                 header = f"≡ƒÉª **Recent Tweets (Last {count})**"
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:130:1: W293 [*] Blank line contains whitespace
    |
129 |                 header = f"≡ƒÉª **Recent Tweets (Last {count})**"
130 |             
    | ^^^^^^^^^^^^ W293
131 |             if not rows:
132 |                 if symbol:
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:137:1: W293 [*] Blank line contains whitespace
    |
135 |                     await ctx.send("≡ƒÉª No tweets found in database")
136 |                 return
137 |             
    | ^^^^^^^^^^^^ W293
138 |             response = header + "\n\n"
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:139:1: W293 [*] Blank line contains whitespace
    |
138 |             response = header + "\n\n"
139 |             
    | ^^^^^^^^^^^^ W293
140 |             for row in rows:
141 |                 discord_date, tweet_date, content, author, channel, stock_tags = row
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:142:1: W293 [*] Blank line contains whitespace
    |
140 |             for row in rows:
141 |                 discord_date, tweet_date, content, author, channel, stock_tags = row
142 |                 
    | ^^^^^^^^^^^^^^^^ W293
143 |                 # Truncate content if too long
144 |                 display_content = content[:150] + "..." if len(content) > 150 else content
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:144:89: E501 Line too long (90 > 88)
    |
143 |                 # Truncate content if too long
144 |                 display_content = content[:150] + "..." if len(content) > 150 else content
    |                                                                                         ^^ E501
145 |                 
146 |                 response += f"**@{author}** in #{channel}\n"
    |

src\bot\commands\twitter_cmd.py:145:1: W293 [*] Blank line contains whitespace
    |
143 |                 # Truncate content if too long
144 |                 display_content = content[:150] + "..." if len(content) > 150 else content
145 |                 
    | ^^^^^^^^^^^^^^^^ W293
146 |                 response += f"**@{author}** in #{channel}\n"
147 |                 response += f"ΓÇó {display_content}\n"
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:148:1: W293 [*] Blank line contains whitespace
    |
146 |                 response += f"**@{author}** in #{channel}\n"
147 |                 response += f"ΓÇó {display_content}\n"
148 |                 
    | ^^^^^^^^^^^^^^^^ W293
149 |                 if tweet_date:
150 |                     response += f"ΓÇó Posted: {tweet_date[:10]}"
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:153:1: W293 [*] Blank line contains whitespace
    |
151 |                 else:
152 |                     response += f"ΓÇó Discord: {discord_date[:10]}"
153 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
154 |                 if stock_tags:
155 |                     response += f" | Stocks: {stock_tags}\n\n"
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:158:1: W293 [*] Blank line contains whitespace
    |
156 |                 else:
157 |                     response += "\n\n"
158 |                 
    | ^^^^^^^^^^^^^^^^ W293
159 |                 # Check if response is getting too long
160 |                 if len(response) > 1500:
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:163:1: W293 [*] Blank line contains whitespace
    |
161 |                     await ctx.send(response)
162 |                     response = ""
163 |             
    | ^^^^^^^^^^^^ W293
164 |             if response:
165 |                 await ctx.send(response)
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:166:1: W293 [*] Blank line contains whitespace
    |
164 |             if response:
165 |                 await ctx.send(response)
166 |                 
    | ^^^^^^^^^^^^^^^^ W293
167 |         except Exception as e:
168 |             await ctx.send(f"Γ¥î **Error fetching tweets**: {str(e)}")
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:174:1: W293 Blank line contains whitespace
    |
172 |         """
173 |         Show detailed Twitter statistics.
174 |         
    | ^^^^^^^^ W293
175 |         Usage: !twitter_stats [channel_name]
176 |         """
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:184:38: W291 Trailing whitespace
    |
182 |                            COUNT(DISTINCT stock_tags) as unique_stocks,
183 |                            COUNT(DISTINCT author) as unique_authors
184 |                     FROM twitter_data 
    |                                      ^ W291
185 |                     WHERE channel = ? AND stock_tags IS NOT NULL AND stock_tags != ''
186 |                 """, (channel_name,), fetch_results=True)
    |
    = help: Remove trailing whitespace

src\bot\commands\twitter_cmd.py:187:1: W293 [*] Blank line contains whitespace
    |
185 |                     WHERE channel = ? AND stock_tags IS NOT NULL AND stock_tags != ''
186 |                 """, (channel_name,), fetch_results=True)
187 |                 
    | ^^^^^^^^^^^^^^^^ W293
188 |                 header = f"≡ƒôè **Twitter Stats for #{channel_name}**"
189 |             else:
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:196:38: W291 Trailing whitespace
    |
194 |                            COUNT(DISTINCT author) as unique_authors,
195 |                            COUNT(DISTINCT channel) as unique_channels
196 |                     FROM twitter_data 
    |                                      ^ W291
197 |                     WHERE stock_tags IS NOT NULL AND stock_tags != ''
198 |                 """, fetch_results=True)
    |
    = help: Remove trailing whitespace

src\bot\commands\twitter_cmd.py:199:1: W293 [*] Blank line contains whitespace
    |
197 |                     WHERE stock_tags IS NOT NULL AND stock_tags != ''
198 |                 """, fetch_results=True)
199 |                 
    | ^^^^^^^^^^^^^^^^ W293
200 |                 header = "≡ƒôè **Overall Twitter Statistics**"
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:201:1: W293 [*] Blank line contains whitespace
    |
200 |                 header = "≡ƒôè **Overall Twitter Statistics**"
201 |             
    | ^^^^^^^^^^^^ W293
202 |             if not stats_rows:
203 |                 await ctx.send("≡ƒôè No Twitter data found")
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:205:1: W293 [*] Blank line contains whitespace
    |
203 |                 await ctx.send("≡ƒôè No Twitter data found")
204 |                 return
205 |                 
    | ^^^^^^^^^^^^^^^^ W293
206 |             try:
207 |                 if channel_name:
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:214:89: E501 Line too long (96 > 88)
    |
212 |                     response += f"ΓÇó Unique Authors: {unique_authors}\n"
213 |                 else:
214 |                     total_tweets, unique_stocks, unique_authors, unique_channels = stats_rows[0]  # type: ignore
    |                                                                                         ^^^^^^^^ E501
215 |                     response = header + "\n"
216 |                     response += f"ΓÇó Total Tweets: {total_tweets}\n"
    |

src\bot\commands\twitter_cmd.py:223:1: W293 [*] Blank line contains whitespace
    |
221 |                 await ctx.send("Γ¥î Error parsing Twitter statistics data")
222 |                 return
223 |             
    | ^^^^^^^^^^^^ W293
224 |             # Get recent activity (last 7 days)
225 |             recent_activity = execute_sql("""
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:227:34: W291 Trailing whitespace
    |
225 |             recent_activity = execute_sql("""
226 |                 SELECT COUNT(*) as recent_tweets
227 |                 FROM twitter_data 
    |                                  ^ W291
228 |                 WHERE discord_date >= datetime('now', '-7 days')
229 |                 AND stock_tags IS NOT NULL AND stock_tags != ''
    |
    = help: Remove trailing whitespace

src\bot\commands\twitter_cmd.py:231:1: W293 [*] Blank line contains whitespace
    |
229 |                 AND stock_tags IS NOT NULL AND stock_tags != ''
230 |             """, fetch_results=True)
231 |             
    | ^^^^^^^^^^^^ W293
232 |             if recent_activity:
233 |                 try:
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:238:1: W293 [*] Blank line contains whitespace
    |
236 |                 except (IndexError, TypeError):
237 |                     response += "ΓÇó Recent Activity (7 days): 0 tweets\n"
238 |             
    | ^^^^^^^^^^^^ W293
239 |             await ctx.send(response)
    |
    = help: Remove whitespace from blank line

src\bot\commands\twitter_cmd.py:240:1: W293 [*] Blank line contains whitespace
    |
239 |             await ctx.send(response)
240 |             
    | ^^^^^^^^^^^^ W293
241 |         except Exception as e:
242 |             await ctx.send(f"Γ¥î **Error fetching Twitter stats**: {str(e)}")
    |
    = help: Remove whitespace from blank line

src\bot\events.py:24:1: W293 [*] Blank line contains whitespace
   |
22 |         if message.author == bot.user:
23 |             return
24 |         
   | ^^^^^^^^ W293
25 |         config = settings()
26 |         if str(message.channel.id) in config.log_channel_ids_list:
   |
   = help: Remove whitespace from blank line

src\channel_processor.py:24:89: E501 Line too long (93 > 88)
   |
22 |     channel_name: str, channel_type: str = "general"
23 | ) -> Dict[str, Any]:
24 |     """Process unprocessed messages for a specific channel using the unified message cleaner.
   |                                                                                         ^^^^^ E501
25 |
26 |     Args:
   |

src\channel_processor.py:48:89: E501 Line too long (89 > 88)
   |
46 |         message_dicts = []
47 |         for message in unprocessed_messages:
48 |             # Expected format: (id, message_id, author, content, channel, timestamp, ...)
   |                                                                                         ^ E501
49 |             if len(message) >= 6:
50 |                 message_dict = {
   |

src\channel_processor.py:111:34: F841 Local variable `conn` is assigned to but never used
    |
109 |     """
110 |     try:
111 |         with get_connection() as conn:
    |                                  ^^^^ F841
112 |             stats = {}
    |
    = help: Remove assignment to unused variable `conn`

src\channel_processor.py:141:66: W291 Trailing whitespace
    |
139 |                 result = execute_sql(
140 |                     """
141 |                     SELECT COUNT(*) FROM discord_market_clean dmc 
    |                                                                  ^ W291
142 |                     JOIN discord_messages dm ON dmc.message_id = dm.message_id 
143 |                     WHERE dm.channel = ?
    |
    = help: Remove trailing whitespace

src\channel_processor.py:142:79: W291 Trailing whitespace
    |
140 |                     """
141 |                     SELECT COUNT(*) FROM discord_market_clean dmc 
142 |                     JOIN discord_messages dm ON dmc.message_id = dm.message_id 
    |                                                                               ^ W291
143 |                     WHERE dm.channel = ?
144 |                 """,
    |
    = help: Remove trailing whitespace

src\channel_processor.py:168:67: W291 Trailing whitespace
    |
166 |                 result = execute_sql(
167 |                     """
168 |                     SELECT COUNT(*) FROM discord_trading_clean dtc 
    |                                                                   ^ W291
169 |                     JOIN discord_messages dm ON dtc.message_id = dm.message_id 
170 |                     WHERE dm.channel = ?
    |
    = help: Remove trailing whitespace

src\channel_processor.py:169:79: W291 Trailing whitespace
    |
167 |                     """
168 |                     SELECT COUNT(*) FROM discord_trading_clean dtc 
169 |                     JOIN discord_messages dm ON dtc.message_id = dm.message_id 
    |                                                                               ^ W291
170 |                     WHERE dm.channel = ?
171 |                 """,
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:25:83: W291 [*] Trailing whitespace
   |
23 | # Add these functions to integrate with existing chart.py
24 |
25 | def create_enhanced_chart_with_position_analysis(symbol: str, period: str = "6mo", 
   |                                                                                   ^ W291
26 |                                               chart_type: str = "candle", 
27 |                                               theme: str = "robinhood_black") -> Tuple[Optional[str], str]:
   |
   = help: Remove trailing whitespace

src\chart_enhancements.py:26:74: W291 [*] Trailing whitespace
   |
25 | def create_enhanced_chart_with_position_analysis(symbol: str, period: str = "6mo", 
26 |                                               chart_type: str = "candle", 
   |                                                                          ^ W291
27 |                                               theme: str = "robinhood_black") -> Tuple[Optional[str], str]:
28 |     """
   |
   = help: Remove trailing whitespace

src\chart_enhancements.py:27:89: E501 Line too long (107 > 88)
   |
25 | def create_enhanced_chart_with_position_analysis(symbol: str, period: str = "6mo", 
26 |                                               chart_type: str = "candle", 
27 |                                               theme: str = "robinhood_black") -> Tuple[Optional[str], str]:
   |                                                                                         ^^^^^^^^^^^^^^^^^^^ E501
28 |     """
29 |     Enhanced version of create_chart that includes position analysis overlay.
   |

src\chart_enhancements.py:30:1: W293 Blank line contains whitespace
   |
28 |     """
29 |     Enhanced version of create_chart that includes position analysis overlay.
30 |     
   | ^^^^ W293
31 |     Args:
32 |         symbol: Stock ticker symbol
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:36:1: W293 Blank line contains whitespace
   |
34 |         chart_type: Type of chart (candle, ohlc, line)
35 |         theme: Chart theme (robinhood_black, claude_style, discord_dark)
36 |         
   | ^^^^^^^^ W293
37 |     Returns:
38 |         Tuple of (chart_path, analysis_report) where chart_path can be None on error
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:44:1: W293 [*] Blank line contains whitespace
   |
42 |         create_enhanced_chart_annotations,
43 |     )
44 |     
   | ^^^^ W293
45 |     # Get basic chart data
46 |     data = yf.download(symbol, period=period, interval="1d")
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:49:1: W293 [*] Blank line contains whitespace
   |
47 |     if data is None or data.empty:
48 |         return None, "Γ¥î Unable to fetch stock data"
49 |     
   | ^^^^ W293
50 |     # Calculate date range for position analysis
51 |     end_date = datetime.now()
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:53:1: W293 [*] Blank line contains whitespace
   |
51 |     end_date = datetime.now()
52 |     start_date = end_date - timedelta(days=180)  # 6 months of trade analysis
53 |     
   | ^^^^ W293
54 |     # Get position analysis
55 |     position_analysis = analyze_position_history(symbol, start_date, end_date)
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:56:1: W293 [*] Blank line contains whitespace
   |
54 |     # Get position analysis
55 |     position_analysis = analyze_position_history(symbol, start_date, end_date)
56 |     
   | ^^^^ W293
57 |     # Create enhanced annotations
58 |     create_enhanced_chart_annotations(position_analysis)
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:59:1: W293 [*] Blank line contains whitespace
   |
57 |     # Create enhanced annotations
58 |     create_enhanced_chart_annotations(position_analysis)
59 |     
   | ^^^^ W293
60 |     # Get existing trade data and process with FIFO
61 |     trade_data = query_trade_data(symbol, start_date, end_date)
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:62:1: W293 [*] Blank line contains whitespace
   |
60 |     # Get existing trade data and process with FIFO
61 |     trade_data = query_trade_data(symbol, start_date, end_date)
62 |     
   | ^^^^ W293
63 |     if not trade_data.empty:
64 |         # Process trades with FIFO for accurate P/L
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:68:1: W293 [*] Blank line contains whitespace
   |
66 |         buy_markers = []
67 |         sell_markers = []
68 |         
   | ^^^^^^^^ W293
69 |         # Add cost basis evolution line data
70 |         cost_basis_data = []
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:71:1: W293 [*] Blank line contains whitespace
   |
69 |         # Add cost basis evolution line data
70 |         cost_basis_data = []
71 |         
   | ^^^^^^^^ W293
72 |         for _, trade in trade_data.iterrows():
73 |             trade_date = pd.to_datetime(trade['execution_date']).date()
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:77:1: W293 [*] Blank line contains whitespace
   |
75 |             shares = float(trade['total_quantity'])
76 |             price = float(trade['execution_price'])
77 |             
   | ^^^^^^^^^^^^ W293
78 |             if action == 'buy':
79 |                 fifo_tracker.add_buy(shares, price, trade_date)
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:86:1: W293 [*] Blank line contains whitespace
   |
84 |                     'value': shares * price
85 |                 })
86 |                 
   | ^^^^^^^^^^^^^^^^ W293
87 |                 # Calculate current cost basis after this buy
88 |                 total_shares = sum([buy[0] for buy in fifo_tracker.buy_queue])
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:91:1: W293 [*] Blank line contains whitespace
   |
89 |                 total_cost = sum([buy[0] * buy[1] for buy in fifo_tracker.buy_queue])
90 |                 avg_cost_basis = total_cost / total_shares if total_shares > 0 else 0
91 |                 
   | ^^^^^^^^^^^^^^^^ W293
92 |                 cost_basis_data.append({
93 |                     'date': trade_date,
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:97:1: W293 [*] Blank line contains whitespace
   |
95 |                     'position_size': total_shares
96 |                 })
97 |                 
   | ^^^^^^^^^^^^^^^^ W293
98 |             elif action == 'sell':
99 |                 realized_pnl = fifo_tracker.process_sell(shares, price, trade_date)
   |
   = help: Remove whitespace from blank line

src\chart_enhancements.py:107:1: W293 [*] Blank line contains whitespace
    |
105 |                     'pnl': realized_pnl
106 |                 })
107 |                 
    | ^^^^^^^^^^^^^^^^ W293
108 |                 # Update cost basis after sell
109 |                 total_shares = sum([buy[0] for buy in fifo_tracker.buy_queue])
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:111:89: E501 Line too long (89 > 88)
    |
109 |                 total_shares = sum([buy[0] for buy in fifo_tracker.buy_queue])
110 |                 if total_shares > 0:
111 |                     total_cost = sum([buy[0] * buy[1] for buy in fifo_tracker.buy_queue])
    |                                                                                         ^ E501
112 |                     avg_cost_basis = total_cost / total_shares
113 |                     cost_basis_data.append({
    |

src\chart_enhancements.py:118:1: W293 [*] Blank line contains whitespace
    |
116 |                         'position_size': total_shares
117 |                     })
118 |     
    | ^^^^ W293
119 |     # Create the chart with enhanced features
120 |     chart_path = create_enhanced_visual_chart(data, symbol, buy_markers, sell_markers, 
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:120:87: W291 [*] Trailing whitespace
    |
119 |     # Create the chart with enhanced features
120 |     chart_path = create_enhanced_visual_chart(data, symbol, buy_markers, sell_markers, 
    |                                                                                       ^ W291
121 |                                             cost_basis_data, theme, chart_type)
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:122:1: W293 [*] Blank line contains whitespace
    |
120 |     chart_path = create_enhanced_visual_chart(data, symbol, buy_markers, sell_markers, 
121 |                                             cost_basis_data, theme, chart_type)
122 |     
    | ^^^^ W293
123 |     # Generate comprehensive analysis report
124 |     if 'error' not in position_analysis:
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:127:1: W293 [*] Blank line contains whitespace
    |
125 |         from src.position_analysis import generate_position_report
126 |         analysis_report = generate_position_report(symbol, start_date, end_date)
127 |         
    | ^^^^^^^^ W293
128 |         # Add chart-specific insights
129 |         analysis_report += "\n\n≡ƒôê **Chart Analysis:**\n"
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:131:89: E501 Line too long (99 > 88)
    |
129 |         analysis_report += "\n\n≡ƒôê **Chart Analysis:**\n"
130 |         analysis_report += f"ΓÇó Chart Period: {period} ({chart_type} style)\n"
131 |         analysis_report += f"ΓÇó Trade Markers: {len(buy_markers)} buys, {len(sell_markers)} sells\n"
    |                                                                                         ^^^^^^^^^^^ E501
132 |         
133 |         if cost_basis_data and not data.empty:
    |

src\chart_enhancements.py:132:1: W293 [*] Blank line contains whitespace
    |
130 |         analysis_report += f"ΓÇó Chart Period: {period} ({chart_type} style)\n"
131 |         analysis_report += f"ΓÇó Trade Markers: {len(buy_markers)} buys, {len(sell_markers)} sells\n"
132 |         
    | ^^^^^^^^ W293
133 |         if cost_basis_data and not data.empty:
134 |             final_cost_basis = cost_basis_data[-1]['cost_basis']
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:136:89: E501 Line too long (97 > 88)
    |
134 |             final_cost_basis = cost_basis_data[-1]['cost_basis']
135 |             current_price = float(data['Close'].iloc[-1])  # Ensure numeric type
136 |             cost_basis_vs_current = ((current_price - final_cost_basis) / final_cost_basis) * 100
    |                                                                                         ^^^^^^^^^ E501
137 |             analysis_report += f"ΓÇó Cost Basis vs Current: ${final_cost_basis:.2f} vs ${current_price:.2f} ({cost_basis_vs_current:+.1ΓÇª
138 |     else:
    |

src\chart_enhancements.py:137:89: E501 Line too long (140 > 88)
    |
135 | ΓÇªc[-1])  # Ensure numeric type
136 | ΓÇª - final_cost_basis) / final_cost_basis) * 100
137 | ΓÇªrrent: ${final_cost_basis:.2f} vs ${current_price:.2f} ({cost_basis_vs_current:+.1f}%)\n"
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
138 | ΓÇª
139 | ΓÇª]
    |

src\chart_enhancements.py:140:1: W293 [*] Blank line contains whitespace
    |
138 |     else:
139 |         analysis_report = position_analysis['error']
140 |     
    | ^^^^ W293
141 |     return chart_path, analysis_report
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:144:85: W291 [*] Trailing whitespace
    |
144 | def create_enhanced_visual_chart(data: pd.DataFrame, symbol: str, buy_markers: List, 
    |                                                                                     ^ W291
145 |                                sell_markers: List, cost_basis_data: List, 
146 |                                theme: str, chart_type: str) -> str:
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:145:74: W291 [*] Trailing whitespace
    |
144 | def create_enhanced_visual_chart(data: pd.DataFrame, symbol: str, buy_markers: List, 
145 |                                sell_markers: List, cost_basis_data: List, 
    |                                                                          ^ W291
146 |                                theme: str, chart_type: str) -> str:
147 |     """
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:149:1: W293 Blank line contains whitespace
    |
147 |     """
148 |     Create visually enhanced chart with cost basis line and position indicators.
149 |     
    | ^^^^ W293
150 |     Args:
151 |         data: Price data from yfinance
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:154:49: W291 Trailing whitespace
    |
152 |         symbol: Stock ticker
153 |         buy_markers: List of buy trade markers
154 |         sell_markers: List of sell trade markers 
    |                                                 ^ W291
155 |         cost_basis_data: List of cost basis evolution points
156 |         theme: Chart theme
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:158:1: W293 Blank line contains whitespace
    |
156 |         theme: Chart theme
157 |         chart_type: Chart type
158 |         
    | ^^^^^^^^ W293
159 |     Returns:
160 |         Path to saved chart file
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:162:1: W293 [*] Blank line contains whitespace
    |
160 |         Path to saved chart file
161 |     """
162 |     
    | ^^^^ W293
163 |     # Set up theme-specific styling
164 |     if theme == "robinhood_black":
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:174:1: W293 [*] Blank line contains whitespace
    |
172 |         bg_color = '#000000'
173 |         cost_basis_color = '#ff6b6b'  # Soft red for cost basis line
174 |         
    | ^^^^^^^^ W293
175 |     elif theme == "claude_style":
176 |         style = mpf.make_mpf_style(
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:183:1: W293 [*] Blank line contains whitespace
    |
181 |         bg_color = '#ffffff'
182 |         cost_basis_color = '#e17055'
183 |         
    | ^^^^^^^^ W293
184 |     else:  # discord_dark
185 |         style = mpf.make_mpf_style(
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:194:1: W293 [*] Blank line contains whitespace
    |
192 |         bg_color = '#36393f'
193 |         cost_basis_color = '#f04747'
194 |     
    | ^^^^ W293
195 |     # Prepare markers for mplfinance
196 |     buy_points = []
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:198:1: W293 [*] Blank line contains whitespace
    |
196 |     buy_points = []
197 |     sell_points = []
198 |     
    | ^^^^ W293
199 |     # Convert markers to mplfinance format
200 |     data_index = data.index
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:201:1: W293 [*] Blank line contains whitespace
    |
199 |     # Convert markers to mplfinance format
200 |     data_index = data.index
201 |     
    | ^^^^ W293
202 |     for buy in buy_markers:
203 |         marker_date = pd.to_datetime(buy['date'])
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:207:89: E501 Line too long (93 > 88)
    |
205 |             # Position buy marker slightly below the low
206 |             low_price = data.loc[marker_date, 'Low']
207 |             marker_price = pd.to_numeric(low_price) * 0.995  # 0.5% below low  # type: ignore
    |                                                                                         ^^^^^ E501
208 |             buy_points.append(marker_price)
209 |         else:
    |

src\chart_enhancements.py:211:1: W293 [*] Blank line contains whitespace
    |
209 |         else:
210 |             buy_points.append(np.nan)
211 |     
    | ^^^^ W293
212 |     for sell in sell_markers:
213 |         marker_date = pd.to_datetime(sell['date'])
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:217:89: E501 Line too long (95 > 88)
    |
215 |             # Position sell marker slightly above the high
216 |             high_price = data.loc[marker_date, 'High']
217 |             marker_price = pd.to_numeric(high_price) * 1.005  # 0.5% above high  # type: ignore
    |                                                                                         ^^^^^^^ E501
218 |             sell_points.append(marker_price)
219 |         else:
    |

src\chart_enhancements.py:221:1: W293 [*] Blank line contains whitespace
    |
219 |         else:
220 |             sell_points.append(np.nan)
221 |     
    | ^^^^ W293
222 |     # Create cost basis line if we have data
223 |     addplot_list = []
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:224:1: W293 [*] Blank line contains whitespace
    |
222 |     # Create cost basis line if we have data
223 |     addplot_list = []
224 |     
    | ^^^^ W293
225 |     if cost_basis_data:
226 |         # Create cost basis DataFrame aligned with price data
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:228:1: W293 [*] Blank line contains whitespace
    |
226 |         # Create cost basis DataFrame aligned with price data
227 |         cost_basis_series = pd.Series(index=data.index, dtype=float)
228 |         
    | ^^^^^^^^ W293
229 |         # Forward-fill cost basis values
230 |         current_cost_basis = None
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:235:1: W293 [*] Blank line contains whitespace
    |
233 |             if cb_date in data.index:
234 |                 current_cost_basis = cb_point['cost_basis']
235 |             
    | ^^^^^^^^^^^^ W293
236 |             # Fill from this date forward until next update
237 |             if current_cost_basis is not None:
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:240:1: W293 [*] Blank line contains whitespace
    |
238 |                 mask = data.index >= cb_date
239 |                 cost_basis_series[mask] = current_cost_basis
240 |         
    | ^^^^^^^^ W293
241 |         # Add cost basis line to chart
242 |         addplot_list.append(
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:243:48: W291 [*] Trailing whitespace
    |
241 |         # Add cost basis line to chart
242 |         addplot_list.append(
243 |             mpf.make_addplot(cost_basis_series, 
    |                                                ^ W291
244 |                            color=cost_basis_color, 
245 |                            width=2, 
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:244:51: W291 [*] Trailing whitespace
    |
242 |         addplot_list.append(
243 |             mpf.make_addplot(cost_basis_series, 
244 |                            color=cost_basis_color, 
    |                                                   ^ W291
245 |                            width=2, 
246 |                            linestyle='--',
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:245:36: W291 [*] Trailing whitespace
    |
243 |             mpf.make_addplot(cost_basis_series, 
244 |                            color=cost_basis_color, 
245 |                            width=2, 
    |                                    ^ W291
246 |                            linestyle='--',
247 |                            alpha=0.8)
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:249:1: W293 [*] Blank line contains whitespace
    |
247 |                            alpha=0.8)
248 |         )
249 |     
    | ^^^^ W293
250 |     # Add buy/sell markers if they exist
251 |     if buy_points:
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:254:41: W291 [*] Trailing whitespace
    |
252 |         buy_series = pd.Series(buy_points, index=data.index[:len(buy_points)])
253 |         addplot_list.append(
254 |             mpf.make_addplot(buy_series, 
    |                                         ^ W291
255 |                            type='scatter', 
256 |                            markersize=100, 
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:255:43: W291 [*] Trailing whitespace
    |
253 |         addplot_list.append(
254 |             mpf.make_addplot(buy_series, 
255 |                            type='scatter', 
    |                                           ^ W291
256 |                            markersize=100, 
257 |                            marker='^',
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:256:43: W291 [*] Trailing whitespace
    |
254 |             mpf.make_addplot(buy_series, 
255 |                            type='scatter', 
256 |                            markersize=100, 
    |                                           ^ W291
257 |                            marker='^',
258 |                            color='#00ff00',
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:261:1: W293 [*] Blank line contains whitespace
    |
259 |                            alpha=0.8)
260 |         )
261 |     
    | ^^^^ W293
262 |     if sell_points:
263 |         sell_series = pd.Series(sell_points, index=data.index[:len(sell_points)])
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:272:1: W293 [*] Blank line contains whitespace
    |
270 |                            alpha=0.8)
271 |         )
272 |     
    | ^^^^ W293
273 |     # Enhanced title with position info
274 |     if cost_basis_data:
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:279:1: W293 [*] Blank line contains whitespace
    |
277 |         current_price = data['Close'].iloc[-1]
278 |         unrealized_pnl = (current_price - final_cost_basis) * final_position
279 |         
    | ^^^^^^^^ W293
280 |         title = f"{symbol} - Position: {final_position:.0f} shares | Cost Basis: ${final_cost_basis:.2f} | Unrealized P/L: ${unrealizΓÇª
281 |     else:
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:280:89: E501 Line too long (146 > 88)
    |
278 | ΓÇªasis) * final_position
279 | ΓÇª
280 | ΓÇª:.0f} shares | Cost Basis: ${final_cost_basis:.2f} | Unrealized P/L: ${unrealized_pnl:+.2f}"
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
281 | ΓÇª
282 | ΓÇªg"
    |

src\chart_enhancements.py:283:1: W293 [*] Blank line contains whitespace
    |
281 |     else:
282 |         title = f"{symbol} - Enhanced Position Tracking"
283 |     
    | ^^^^ W293
284 |     # Create the chart
285 |     timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:288:1: W293 [*] Blank line contains whitespace
    |
286 |     filename = f"{symbol}_{theme}_{chart_type}_enhanced_{timestamp}.png"
287 |     chart_path = CHARTS_DIR / filename
288 |     
    | ^^^^ W293
289 |     # Configure chart type
290 |     plot_type = chart_type if chart_type in ['candle', 'ohlc', 'line'] else 'candle'
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:291:1: W293 [*] Blank line contains whitespace
    |
289 |     # Configure chart type
290 |     plot_type = chart_type if chart_type in ['candle', 'ohlc', 'line'] else 'candle'
291 |     
    | ^^^^ W293
292 |     # Generate the chart
293 |     fig, axes = mpf.plot(
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:304:1: W293 [*] Blank line contains whitespace
    |
302 |         figsize=(12, 8)
303 |     )
304 |     
    | ^^^^ W293
305 |     # Add custom legend for cost basis line
306 |     if cost_basis_data:
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:307:52: W291 [*] Trailing whitespace
    |
305 |     # Add custom legend for cost basis line
306 |     if cost_basis_data:
307 |         axes[0].text(0.02, 0.98, 'Cost Basis Line', 
    |                                                    ^ W291
308 |                     transform=axes[0].transAxes,
309 |                     fontsize=10, 
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:309:33: W291 [*] Trailing whitespace
    |
307 |         axes[0].text(0.02, 0.98, 'Cost Basis Line', 
308 |                     transform=axes[0].transAxes,
309 |                     fontsize=10, 
    |                                 ^ W291
310 |                     color=cost_basis_color,
311 |                     ha='left', va='top',
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:312:56: W291 [*] Trailing whitespace
    |
310 |                     color=cost_basis_color,
311 |                     ha='left', va='top',
312 |                     bbox=dict(boxstyle='round,pad=0.3', 
    |                                                        ^ W291
313 |                              facecolor=bg_color, 
314 |                              edgecolor=cost_basis_color,
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:313:49: W291 [*] Trailing whitespace
    |
311 |                     ha='left', va='top',
312 |                     bbox=dict(boxstyle='round,pad=0.3', 
313 |                              facecolor=bg_color, 
    |                                                 ^ W291
314 |                              edgecolor=cost_basis_color,
315 |                              alpha=0.8))
    |
    = help: Remove trailing whitespace

src\chart_enhancements.py:316:1: W293 [*] Blank line contains whitespace
    |
314 |                              edgecolor=cost_basis_color,
315 |                              alpha=0.8))
316 |     
    | ^^^^ W293
317 |     plt.close(fig)  # Free memory
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:318:1: W293 [*] Blank line contains whitespace
    |
317 |     plt.close(fig)  # Free memory
318 |     
    | ^^^^ W293
319 |     return str(chart_path)
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:325:1: W293 Blank line contains whitespace
    |
323 |     """
324 |     Create a position size evolution chart for a given symbol.
325 |     
    | ^^^^ W293
326 |     Args:
327 |         symbol: Stock ticker symbol
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:328:1: W293 Blank line contains whitespace
    |
326 |     Args:
327 |         symbol: Stock ticker symbol
328 |         
    | ^^^^^^^^ W293
329 |     Returns:
330 |         Path to position size chart or None if error
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:333:1: W293 [*] Blank line contains whitespace
    |
331 |     """
332 |     from src.position_analysis import analyze_position_history
333 |     
    | ^^^^ W293
334 |     end_date = datetime.now()
335 |     start_date = end_date - timedelta(days=365)  # 1 year
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:336:1: W293 [*] Blank line contains whitespace
    |
334 |     end_date = datetime.now()
335 |     start_date = end_date - timedelta(days=365)  # 1 year
336 |     
    | ^^^^ W293
337 |     analysis = analyze_position_history(symbol, start_date, end_date)
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:338:1: W293 [*] Blank line contains whitespace
    |
337 |     analysis = analyze_position_history(symbol, start_date, end_date)
338 |     
    | ^^^^ W293
339 |     if 'error' in analysis:
340 |         return None
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:341:1: W293 [*] Blank line contains whitespace
    |
339 |     if 'error' in analysis:
340 |         return None
341 |     
    | ^^^^ W293
342 |     timeline = analysis.get('timeline_data', {}).get('position_evolution', [])
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:343:1: W293 [*] Blank line contains whitespace
    |
342 |     timeline = analysis.get('timeline_data', {}).get('position_evolution', [])
343 |     
    | ^^^^ W293
344 |     if not timeline:
345 |         return None
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:346:1: W293 [*] Blank line contains whitespace
    |
344 |     if not timeline:
345 |         return None
346 |     
    | ^^^^ W293
347 |     # Create position size chart
348 |     dates = [pd.to_datetime(point['date']) for point in timeline]
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:350:1: W293 [*] Blank line contains whitespace
    |
348 |     dates = [pd.to_datetime(point['date']) for point in timeline]
349 |     position_sizes = [point['position_size'] for point in timeline]
350 |     
    | ^^^^ W293
351 |     plt.figure(figsize=(10, 6))
352 |     plt.plot(dates, position_sizes, marker='o', linewidth=2, markersize=6)
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:360:1: W293 [*] Blank line contains whitespace
    |
358 |     plt.xticks(rotation=45)
359 |     plt.tight_layout()
360 |     
    | ^^^^ W293
361 |     # Save chart
362 |     timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    |
    = help: Remove whitespace from blank line

src\chart_enhancements.py:367:1: W293 [*] Blank line contains whitespace
    |
365 |     plt.savefig(chart_path, dpi=300, facecolor='white')
366 |     plt.close()
367 |     
    | ^^^^ W293
368 |     return str(chart_path)
    |
    = help: Remove whitespace from blank line

src\config.py:55:89: E501 Line too long (91 > 88)
   |
53 |     LOG_CHANNEL_IDS: str = ""  # Comma-separated channel IDs for Discord bot
54 |     SQLITE_PATH: str = (
55 |         "data/database/price_history.db"  # SQLite database path for migration and fallback
   |                                                                                         ^^^ E501
56 |     )
   |

src\config.py:185:89: E501 Line too long (113 > 88)
    |
184 |     raise ValueError(
185 |         "No database configuration found. Set DATABASE_URL, DATABASE_DIRECT_URL, or configure Supabase settings."
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
186 |     )
    |

src\data_collector.py:4:8: F401 [*] `sqlite3` imported but unused
  |
2 | import logging
3 | import re
4 | import sqlite3
  |        ^^^^^^^ F401
5 | from datetime import datetime
6 | from pathlib import Path
  |
  = help: Remove unused import: `sqlite3`

src\data_collector.py:11:24: F401 [*] `src.config.settings` imported but unused
   |
 9 | import yfinance as yf
10 |
11 | from src.config import settings
   |                        ^^^^^^^^ F401
12 | from src.message_cleaner import extract_ticker_symbols
   |
   = help: Remove unused import: `src.config.settings`

src\data_collector.py:41:89: E501 Line too long (98 > 88)
   |
40 |     Args:
41 |         symbols: List of ticker symbols to fetch prices for (default: None, uses active positions)
   |                                                                                         ^^^^^^^^^^ E501
42 |
43 |     Returns:
   |

src\data_collector.py:132:89: E501 Line too long (114 > 88)
    |
130 |             if use_postgres():
131 |                 query = """
132 |                 INSERT INTO realtime_prices (symbol, timestamp, price, previous_close, abs_change, percent_change)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
133 |                 VALUES (%s, %s, %s, %s, %s, %s)
134 |                 ON CONFLICT (symbol, timestamp) DO UPDATE SET
    |

src\data_collector.py:151:55: W291 Trailing whitespace
    |
149 |                 # SQLite version
150 |                 query = """
151 |                 INSERT OR REPLACE INTO realtime_prices 
    |                                                       ^ W291
152 |                 (symbol, timestamp, price, previous_close, abs_change, percent_change)
153 |                 VALUES (?, ?, ?, ?, ?, ?)
    |
    = help: Remove trailing whitespace

src\data_collector.py:176:89: E501 Line too long (98 > 88)
    |
175 |     Args:
176 |         symbols: List of ticker symbols to fetch prices for (default: None, uses active positions)
    |                                                                                         ^^^^^^^^^^ E501
177 |         period: Time period to fetch data for (default: "1y")
178 |         interval: Data interval (default: "1d" for daily)
    |

src\data_collector.py:210:89: E501 Line too long (108 > 88)
    |
209 |     logger.info(
210 |         f"Fetching historical prices for {len(valid_symbols)} symbols with {interval} interval for {period}"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
211 |     )
    |

src\data_collector.py:228:89: E501 Line too long (104 > 88)
    |
226 |                 csv_path = (
227 |                     RAW_DIR
228 |                     / f"historical_{symbol}_{period}_{interval}_{datetime.now().strftime('%Y%m%d')}.csv"
    |                                                                                         ^^^^^^^^^^^^^^^^ E501
229 |                 )
230 |                 history.to_csv(csv_path, index=False)
    |

src\data_collector.py:263:89: E501 Line too long (112 > 88)
    |
261 |             if use_postgres():
262 |                 query = """
263 |                 INSERT INTO daily_prices (symbol, date, open, high, low, close, volume, dividends, stock_splits)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^ E501
264 |                 VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
265 |                 ON CONFLICT (symbol, date) DO UPDATE SET
    |

src\data_collector.py:288:52: W291 Trailing whitespace
    |
286 |                 # SQLite version
287 |                 query = """
288 |                 INSERT OR REPLACE INTO daily_prices 
    |                                                    ^ W291
289 |                 (symbol, date, open, high, low, close, volume, dividends, stock_splits)
290 |                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    |
    = help: Remove trailing whitespace

src\data_collector.py:316:89: E501 Line too long (99 > 88)
    |
315 |     Args:
316 |         symbols: List of ticker symbols to fetch metrics for (default: None, uses active positions)
    |                                                                                         ^^^^^^^^^^^ E501
317 |
318 |     Returns:
    |

src\data_collector.py:395:89: E501 Line too long (130 > 88)
    |
393 |             if use_postgres():
394 |                 query = """
395 |                 INSERT INTO stock_metrics (symbol, date, pe_ratio, market_cap, dividend_yield, fifty_day_avg, two_hundred_day_avg)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
396 |                 VALUES (%s, %s, %s, %s, %s, %s, %s)
397 |                 ON CONFLICT (symbol, date) DO UPDATE SET
    |

src\data_collector.py:416:53: W291 Trailing whitespace
    |
414 |                 # SQLite version
415 |                 query = """
416 |                 INSERT OR REPLACE INTO stock_metrics 
    |                                                     ^ W291
417 |                 (symbol, date, pe_ratio, market_cap, dividend_yield, fifty_day_avg, two_hundred_day_avg)
418 |                 VALUES (?, ?, ?, ?, ?, ?, ?)
    |
    = help: Remove trailing whitespace

src\data_collector.py:417:89: E501 Line too long (104 > 88)
    |
415 |                 query = """
416 |                 INSERT OR REPLACE INTO stock_metrics 
417 |                 (symbol, date, pe_ratio, market_cap, dividend_yield, fifty_day_avg, two_hundred_day_avg)
    |                                                                                         ^^^^^^^^^^^^^^^^ E501
418 |                 VALUES (?, ?, ?, ?, ?, ?, ?)
419 |                 """
    |

src\data_collector.py:439:89: E501 Line too long (96 > 88)
    |
438 | def update_all_data():
439 |     """Update all data: real-time prices, historical prices, and metrics for active positions"""
    |                                                                                         ^^^^^^^^ E501
440 |     # Initialize database if it doesn't exist
441 |     from src.db import initialize_database
    |

src\db.py:3:89: E501 Line too long (99 > 88)
  |
1 | """
2 | Resilient async-friendly SQLAlchemy engine for PostgreSQL/Supabase connection.
3 | Handles connection pooling, health checks, prepared statement optimization, and automatic fallback.
  |                                                                                         ^^^^^^^^^^^ E501
4 | """
  |

src\db.py:28:89: E501 Line too long (100 > 88)
   |
26 | def get_sync_engine():
27 |     """
28 |     Get or create the synchronous SQLAlchemy engine with connection pooling and resilience features.
   |                                                                                         ^^^^^^^^^^^^ E501
29 |     Automatically detects Supabase pooler and disables prepared statements for port 6543.
30 |     """
   |

src\db.py:29:89: E501 Line too long (89 > 88)
   |
27 |     """
28 |     Get or create the synchronous SQLAlchemy engine with connection pooling and resilience features.
29 |     Automatically detects Supabase pooler and disables prepared statements for port 6543.
   |                                                                                         ^ E501
30 |     """
31 |     global _sync_engine
   |

src\db.py:67:88: E501 Line too long (90 > 88)
   |
65 |                 if is_pooler:
66 |                     logger.info(
67 |                         "≡ƒöº Detected Supabase pooler (port 6543) - using psycopg2 dialect"
   |                                                                                         ^^ E501
68 |                     )
   |

src\db.py:154:88: E501 Line too long (91 > 88)
    |
152 |                 if is_pooler:
153 |                     logger.info(
154 |                         "≡ƒöº Async engine: Detected Supabase pooler - using asyncpg dialect"
    |                                                                                         ^^^ E501
155 |                     )
    |

src\db.py:248:89: E501 Line too long (99 > 88)
    |
246 |                     if attempt < max_retries - 1:
247 |                         logger.warning(
248 |                             f"Database operation failed (attempt {attempt + 1}/{max_retries}): {e}"
    |                                                                                         ^^^^^^^^^^^ E501
249 |                         )
250 |                         time.sleep(delay * (2**attempt))  # Exponential backoff
    |

src\db.py:261:89: E501 Line too long (98 > 88)
    |
259 |                         if _async_engine:
260 |                             try:
261 |                                 # Note: async engine disposal needs to be handled in async context
    |                                                                                         ^^^^^^^^^^ E501
262 |                                 _async_engine = None  # Mark for recreation
263 |                             except Exception:
    |

src\db.py:267:89: E501 Line too long (90 > 88)
    |
265 |                     else:
266 |                         logger.error(
267 |                             f"Database operation failed after {max_retries} attempts: {e}"
    |                                                                                         ^^ E501
268 |                         )
269 |                         raise last_exception
    |

src\db.py:371:51: W291 Trailing whitespace
    |
369 |                     text(
370 |                         """
371 |                     SELECT name FROM sqlite_master 
    |                                                   ^ W291
372 |                     WHERE type='table' AND name NOT LIKE 'sqlite_%'
373 |                 """
    |
    = help: Remove trailing whitespace

src\db.py:390:23: W291 Trailing whitespace
    |
388 |             query = text(
389 |                 """
390 |                 SELECT 
    |                       ^ W291
391 |                     tablename,
392 |                     pg_size_pretty(pg_total_relation_size(tablename::regclass)) as size,
    |
    = help: Remove trailing whitespace

src\db.py:394:31: W291 Trailing whitespace
    |
392 |                     pg_size_pretty(pg_total_relation_size(tablename::regclass)) as size,
393 |                     pg_total_relation_size(tablename::regclass) as size_bytes
394 |                 FROM pg_tables 
    |                               ^ W291
395 |                 WHERE schemaname = 'public'
396 |                 ORDER BY size_bytes DESC
    |
    = help: Remove trailing whitespace

src\db.py:597:89: E501 Line too long (96 > 88)
    |
596 | def initialize_database():
597 |     """Initialize the database with all required tables by executing the 001_base.sql schema."""
    |                                                                                         ^^^^^^^^ E501
598 |     if use_postgres():
599 |         # Use direct psycopg2 with explicit commits for PostgreSQL
    |

src\db.py:622:89: E501 Line too long (89 > 88)
    |
620 |                 conn.commit()  # Explicit commit for DDL statements
621 |                 logger.info(
622 |                     "Database initialized successfully with all tables from 001_base.sql"
    |                                                                                         ^ E501
623 |                 )
624 |                 return True
    |

src\db.py:645:89: E501 Line too long (167 > 88)
    |
643 | ΓÇª
644 | ΓÇª
645 | ΓÇª INTEGER PRIMARY KEY, message_id TEXT UNIQUE, author TEXT, content TEXT, channel TEXT, timestamp TEXT)"
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
646 | ΓÇª
647 | ΓÇªtables")
    |

src\db.py:675:53: W291 Trailing whitespace
    |
673 |             # SQLite uses INSERT OR REPLACE
674 |             query = f"""
675 |             INSERT OR REPLACE INTO processing_status 
    |                                                     ^ W291
676 |             (message_id, channel, {column}, updated_at)
677 |             VALUES (?, ?, 1, DATETIME('now'))
    |
    = help: Remove trailing whitespace

src\db_utils\bulk.py:24:31: F401 [*] `typing.List` imported but unused
   |
23 | import logging
24 | from typing import Any, Dict, List, Optional, Iterator, Tuple, Callable, Literal
   |                               ^^^^ F401
25 | from pathlib import Path
26 | import time
   |
   = help: Remove unused import

src\db_utils\bulk.py:24:57: F401 [*] `typing.Tuple` imported but unused
   |
23 | import logging
24 | from typing import Any, Dict, List, Optional, Iterator, Tuple, Callable, Literal
   |                                                         ^^^^^ F401
25 | from pathlib import Path
26 | import time
   |
   = help: Remove unused import

src\db_utils\bulk.py:165:89: E501 Line too long (93 > 88)
    |
163 |                     inserted_rows += len(batch_df)
164 |                     logger.debug(
165 |                         f"Batch {batch_num}/{total_batches} completed ({len(batch_df)} rows)"
    |                                                                                         ^^^^^ E501
166 |                     )
    |

src\db_utils\bulk.py:175:89: E501 Line too long (94 > 88)
    |
174 |             logger.info(
175 |                 f"Successfully inserted {inserted_rows} rows to PostgreSQL table {table_name}"
    |                                                                                         ^^^^^^ E501
176 |             )
177 |             return True
    |

src\db_utils\bulk.py:353:9: F841 Local variable `inserter` is assigned to but never used
    |
351 |     """Test database connection and basic functionality."""
352 |     try:
353 |         inserter = BulkInserter()
    |         ^^^^^^^^ F841
354 |
355 |         # Test with small DataFrame
    |
    = help: Remove assignment to unused variable `inserter`

src\db_utils\bulk.py:356:9: F841 Local variable `test_df` is assigned to but never used
    |
355 |         # Test with small DataFrame
356 |         test_df = pd.DataFrame(
    |         ^^^^^^^ F841
357 |             {
358 |                 "id": [1, 2, 3],
    |
    = help: Remove assignment to unused variable `test_df`

src\etl\clean_csv.py:5:81: W291 Trailing whitespace
  |
3 | ==========================================
4 |
5 | Provides robust CSV cleaning utilities to prevent SQL injection, parsing errors, 
  |                                                                                 ^ W291
6 | and data corruption during database inserts.
  |
  = help: Remove trailing whitespace

src\etl\clean_csv.py:17:56: W291 Trailing whitespace
   |
15 | This prevents common issues like:
16 | - "Invalid action 'BBG...'" errors
17 | - SQL parameter substitution failures with % characters  
   |                                                        ^^ W291
18 | - Numeric conversion errors breaking inserts
19 | - Whitespace mismatches breaking equality checks
   |
   = help: Remove trailing whitespace

src\etl\clean_csv.py:23:8: F401 [*] `re` imported but unused
   |
22 | import logging
23 | import re
   |        ^^ F401
24 | from pathlib import Path
25 | from typing import Dict, List, Optional, Set
   |
   = help: Remove unused import: `re`

src\etl\clean_csv.py:40:89: E501 Line too long (92 > 88)
   |
38 | # Columns that should be numeric (for safe coercion)
39 | NUMERIC_COLUMNS: Dict[str, List[str]] = {
40 |     "orders": ["quantity", "price", "total_quantity", "execution_price", "filled_quantity"],
   |                                                                                         ^^^^ E501
41 |     "positions": ["quantity", "price", "equity", "average_buy_price", "calculated_equity"],
42 |     "discord_messages": ["num_chars", "num_words", "sentiment_score"]
   |

src\etl\clean_csv.py:41:89: E501 Line too long (91 > 88)
   |
39 | NUMERIC_COLUMNS: Dict[str, List[str]] = {
40 |     "orders": ["quantity", "price", "total_quantity", "execution_price", "filled_quantity"],
41 |     "positions": ["quantity", "price", "equity", "average_buy_price", "calculated_equity"],
   |                                                                                         ^^^ E501
42 |     "discord_messages": ["num_chars", "num_words", "sentiment_score"]
43 | }
   |

src\etl\clean_csv.py:55:1: W293 [*] Blank line contains whitespace
   |
53 | class CSVCleaner:
54 |     """Robust CSV cleaner that handles common data quality issues."""
55 |     
   | ^^^^ W293
56 |     def __init__(self, table_name: str):
57 |         """
   |
   = help: Remove whitespace from blank line

src\etl\clean_csv.py:59:1: W293 Blank line contains whitespace
   |
57 |         """
58 |         Initialize cleaner for a specific table.
59 |         
   | ^^^^^^^^ W293
60 |         Args:
61 |             table_name: Name of the target table (orders, positions, discord_messages)
   |
   = help: Remove whitespace from blank line

src\etl\clean_csv.py:66:1: W293 [*] Blank line contains whitespace
   |
64 |         self.numeric_cols = NUMERIC_COLUMNS.get(table_name, [])
65 |         self.required_cols = REQUIRED_COLUMNS.get(table_name, [])
66 |         
   | ^^^^^^^^ W293
67 |     def clean_csv(self, csv_path: Path, output_path: Optional[Path] = None) -> pd.DataFrame:
68 |         """
   |
   = help: Remove whitespace from blank line

src\etl\clean_csv.py:67:89: E501 Line too long (92 > 88)
   |
65 |         self.required_cols = REQUIRED_COLUMNS.get(table_name, [])
66 |         
67 |     def clean_csv(self, csv_path: Path, output_path: Optional[Path] = None) -> pd.DataFrame:
   |                                                                                         ^^^^ E501
68 |         """
69 |         Clean a CSV file and return sanitized DataFrame.
   |

src\etl\clean_csv.py:70:1: W293 Blank line contains whitespace
   |
68 |         """
69 |         Clean a CSV file and return sanitized DataFrame.
70 |         
   | ^^^^^^^^ W293
71 |         Args:
72 |             csv_path: Path to input CSV file
   |
   = help: Remove whitespace from blank line

src\etl\clean_csv.py:74:1: W293 Blank line contains whitespace
   |
72 |             csv_path: Path to input CSV file
73 |             output_path: Optional path to save cleaned CSV
74 |             
   | ^^^^^^^^^^^^ W293
75 |         Returns:
76 |             Cleaned pandas DataFrame
   |
   = help: Remove whitespace from blank line

src\etl\clean_csv.py:77:1: W293 Blank line contains whitespace
   |
75 |         Returns:
76 |             Cleaned pandas DataFrame
77 |             
   | ^^^^^^^^^^^^ W293
78 |         Raises:
79 |             FileNotFoundError: If CSV file doesn't exist
   |
   = help: Remove whitespace from blank line

src\etl\clean_csv.py:84:1: W293 [*] Blank line contains whitespace
   |
82 |         if not csv_path.exists():
83 |             raise FileNotFoundError(f"CSV file not found: {csv_path}")
84 |             
   | ^^^^^^^^^^^^ W293
85 |         logger.info(f"Cleaning CSV file: {csv_path}")
   |
   = help: Remove whitespace from blank line

src\etl\clean_csv.py:86:1: W293 [*] Blank line contains whitespace
   |
85 |         logger.info(f"Cleaning CSV file: {csv_path}")
86 |         
   | ^^^^^^^^ W293
87 |         # Load CSV with robust error handling
88 |         try:
   |
   = help: Remove whitespace from blank line

src\etl\clean_csv.py:99:1: W293 [*] Blank line contains whitespace
    |
 97 |             logger.error(f"Failed to read CSV {csv_path}: {e}")
 98 |             raise
 99 |             
    | ^^^^^^^^^^^^ W293
100 |         original_rows = len(df)
101 |         logger.info(f"Loaded {original_rows} rows from CSV")
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:102:1: W293 [*] Blank line contains whitespace
    |
100 |         original_rows = len(df)
101 |         logger.info(f"Loaded {original_rows} rows from CSV")
102 |         
    | ^^^^^^^^ W293
103 |         # Step 1: Clean column names (strip whitespace, normalize)
104 |         df.columns = df.columns.str.strip().str.lower()
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:105:1: W293 [*] Blank line contains whitespace
    |
103 |         # Step 1: Clean column names (strip whitespace, normalize)
104 |         df.columns = df.columns.str.strip().str.lower()
105 |         
    | ^^^^^^^^ W293
106 |         # Step 2: Validate required columns exist
107 |         missing_cols = [col for col in self.required_cols if col not in df.columns]
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:109:89: E501 Line too long (95 > 88)
    |
107 |         missing_cols = [col for col in self.required_cols if col not in df.columns]
108 |         if missing_cols:
109 |             raise ValueError(f"Missing required columns for {self.table_name}: {missing_cols}")
    |                                                                                         ^^^^^^^ E501
110 |             
111 |         # Step 3: Clean string values (strip whitespace, handle nulls)
    |

src\etl\clean_csv.py:110:1: W293 [*] Blank line contains whitespace
    |
108 |         if missing_cols:
109 |             raise ValueError(f"Missing required columns for {self.table_name}: {missing_cols}")
110 |             
    | ^^^^^^^^^^^^ W293
111 |         # Step 3: Clean string values (strip whitespace, handle nulls)
112 |         for col in df.select_dtypes(include=['object']).columns:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:117:1: W293 [*] Blank line contains whitespace
    |
115 |             df[col] = df[col].replace('', None)
116 |             df[col] = df[col].replace('nan', None)
117 |             
    | ^^^^^^^^^^^^ W293
118 |         # Step 4: Clean numeric columns (safe coercion)
119 |         for col in self.numeric_cols:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:122:1: W293 [*] Blank line contains whitespace
    |
120 |             if col in df.columns:
121 |                 df[col] = self._clean_numeric_column(df[col], col)
122 |                 
    | ^^^^^^^^^^^^^^^^ W293
123 |         # Step 5: Special cleaning by table type
124 |         if self.table_name == "orders":
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:130:1: W293 [*] Blank line contains whitespace
    |
128 |         elif self.table_name == "positions":
129 |             df = self._clean_positions_table(df)
130 |             
    | ^^^^^^^^^^^^ W293
131 |         # Step 6: Drop rows with critical nulls
132 |         before_dropna = len(df)
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:135:1: W293 [*] Blank line contains whitespace
    |
133 |         df = df.dropna(subset=self.required_cols)
134 |         after_dropna = len(df)
135 |         
    | ^^^^^^^^ W293
136 |         if before_dropna > after_dropna:
137 |             logger.warning(f"Dropped {before_dropna - after_dropna} rows with null required columns")
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:137:89: E501 Line too long (101 > 88)
    |
136 |         if before_dropna > after_dropna:
137 |             logger.warning(f"Dropped {before_dropna - after_dropna} rows with null required columns")
    |                                                                                         ^^^^^^^^^^^^^ E501
138 |             
139 |         # Step 7: Remove exact duplicates
    |

src\etl\clean_csv.py:138:1: W293 [*] Blank line contains whitespace
    |
136 |         if before_dropna > after_dropna:
137 |             logger.warning(f"Dropped {before_dropna - after_dropna} rows with null required columns")
138 |             
    | ^^^^^^^^^^^^ W293
139 |         # Step 7: Remove exact duplicates
140 |         before_dedup = len(df)
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:143:1: W293 [*] Blank line contains whitespace
    |
141 |         df = df.drop_duplicates()
142 |         after_dedup = len(df)
143 |         
    | ^^^^^^^^ W293
144 |         if before_dedup > after_dedup:
145 |             logger.info(f"Removed {before_dedup - after_dedup} duplicate rows")
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:146:1: W293 [*] Blank line contains whitespace
    |
144 |         if before_dedup > after_dedup:
145 |             logger.info(f"Removed {before_dedup - after_dedup} duplicate rows")
146 |             
    | ^^^^^^^^^^^^ W293
147 |         logger.info(f"Cleaning complete: {original_rows} ΓåÆ {len(df)} rows ({len(df)/original_rows:.1%} retained)")
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:147:89: E501 Line too long (114 > 88)
    |
145 |             logger.info(f"Removed {before_dedup - after_dedup} duplicate rows")
146 |             
147 |         logger.info(f"Cleaning complete: {original_rows} ΓåÆ {len(df)} rows ({len(df)/original_rows:.1%} retained)")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
148 |         
149 |         # Save cleaned CSV if requested
    |

src\etl\clean_csv.py:148:1: W293 [*] Blank line contains whitespace
    |
147 |         logger.info(f"Cleaning complete: {original_rows} ΓåÆ {len(df)} rows ({len(df)/original_rows:.1%} retained)")
148 |         
    | ^^^^^^^^ W293
149 |         # Save cleaned CSV if requested
150 |         if output_path:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:154:1: W293 [*] Blank line contains whitespace
    |
152 |             df.to_csv(output_path, index=False, encoding="utf-8")
153 |             logger.info(f"Saved cleaned CSV to: {output_path}")
154 |             
    | ^^^^^^^^^^^^ W293
155 |         return df
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:156:1: W293 [*] Blank line contains whitespace
    |
155 |         return df
156 |         
    | ^^^^^^^^ W293
157 |     def _clean_numeric_column(self, series: pd.Series, col_name: str) -> pd.Series:
158 |         """Safely convert a column to numeric, handling errors gracefully."""
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:166:1: W293 [*] Blank line contains whitespace
    |
164 |                 # Replace empty strings with NaN
165 |                 series = series.replace('', None)
166 |                 
    | ^^^^^^^^^^^^^^^^ W293
167 |             # Convert to numeric with error handling
168 |             numeric_series = pd.to_numeric(series, errors='coerce')
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:169:1: W293 [*] Blank line contains whitespace
    |
167 |             # Convert to numeric with error handling
168 |             numeric_series = pd.to_numeric(series, errors='coerce')
169 |             
    | ^^^^^^^^^^^^ W293
170 |             # Log conversion issues
171 |             null_count = numeric_series.isnull().sum()
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:173:89: E501 Line too long (109 > 88)
    |
171 |             null_count = numeric_series.isnull().sum()
172 |             if null_count > 0:
173 |                 logger.warning(f"Column '{col_name}': {null_count} values could not be converted to numeric")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
174 |                 
175 |             return numeric_series
    |

src\etl\clean_csv.py:174:1: W293 [*] Blank line contains whitespace
    |
172 |             if null_count > 0:
173 |                 logger.warning(f"Column '{col_name}': {null_count} values could not be converted to numeric")
174 |                 
    | ^^^^^^^^^^^^^^^^ W293
175 |             return numeric_series
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:176:1: W293 [*] Blank line contains whitespace
    |
175 |             return numeric_series
176 |             
    | ^^^^^^^^^^^^ W293
177 |         except Exception as e:
178 |             logger.error(f"Error cleaning numeric column '{col_name}': {e}")
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:180:1: W293 [*] Blank line contains whitespace
    |
178 |             logger.error(f"Error cleaning numeric column '{col_name}': {e}")
179 |             return series
180 |             
    | ^^^^^^^^^^^^ W293
181 |     def _clean_orders_table(self, df: pd.DataFrame) -> pd.DataFrame:
182 |         """Apply orders-specific cleaning rules."""
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:185:13: F841 Local variable `original_actions` is assigned to but never used
    |
183 |         # Filter actions to valid set (prevents "Invalid action" errors)
184 |         if 'action' in df.columns:
185 |             original_actions = df['action'].nunique()
    |             ^^^^^^^^^^^^^^^^ F841
186 |             df['action'] = df['action'].str.lower().str.strip()
    |
    = help: Remove assignment to unused variable `original_actions`

src\etl\clean_csv.py:187:1: W293 [*] Blank line contains whitespace
    |
185 |             original_actions = df['action'].nunique()
186 |             df['action'] = df['action'].str.lower().str.strip()
187 |             
    | ^^^^^^^^^^^^ W293
188 |             # Filter to valid actions only
189 |             valid_mask = df['action'].isin(VALID_ACTIONS)
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:191:1: W293 [*] Blank line contains whitespace
    |
189 |             valid_mask = df['action'].isin(VALID_ACTIONS)
190 |             invalid_count = (~valid_mask).sum()
191 |             
    | ^^^^^^^^^^^^ W293
192 |             if invalid_count > 0:
193 |                 invalid_actions = df.loc[~valid_mask, 'action'].unique()
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:194:89: E501 Line too long (111 > 88)
    |
192 |             if invalid_count > 0:
193 |                 invalid_actions = df.loc[~valid_mask, 'action'].unique()
194 |                 logger.warning(f"Filtering {invalid_count} rows with invalid actions: {list(invalid_actions)}")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^ E501
195 |                 
196 |             df = df[valid_mask]
    |

src\etl\clean_csv.py:195:1: W293 [*] Blank line contains whitespace
    |
193 |                 invalid_actions = df.loc[~valid_mask, 'action'].unique()
194 |                 logger.warning(f"Filtering {invalid_count} rows with invalid actions: {list(invalid_actions)}")
195 |                 
    | ^^^^^^^^^^^^^^^^ W293
196 |             df = df[valid_mask]
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:197:1: W293 [*] Blank line contains whitespace
    |
196 |             df = df[valid_mask]
197 |             
    | ^^^^^^^^^^^^ W293
198 |         # Clean symbol column (remove extra characters)
199 |         if 'symbol' in df.columns:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:203:1: W293 [*] Blank line contains whitespace
    |
201 |             # Remove non-alphabetic characters except dots (for symbols like BRK.B)
202 |             df['symbol'] = df['symbol'].str.replace(r'[^A-Z.]', '', regex=True)
203 |             
    | ^^^^^^^^^^^^ W293
204 |         # Ensure quantity is positive
205 |         if 'quantity' in df.columns:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:207:1: W293 [*] Blank line contains whitespace
    |
205 |         if 'quantity' in df.columns:
206 |             df['quantity'] = df['quantity'].abs()
207 |             
    | ^^^^^^^^^^^^ W293
208 |         return df
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:209:1: W293 [*] Blank line contains whitespace
    |
208 |         return df
209 |         
    | ^^^^^^^^ W293
210 |     def _clean_discord_table(self, df: pd.DataFrame) -> pd.DataFrame:
211 |         """Apply Discord messages-specific cleaning rules."""
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:215:89: E501 Line too long (90 > 88)
    |
213 |         if 'content' in df.columns:
214 |             # Normalize whitespace but preserve content
215 |             df['content'] = df['content'].str.replace(r'\s+', ' ', regex=True).str.strip()
    |                                                                                         ^^ E501
216 |             
217 |             # Truncate very long messages (prevents DB issues)
    |

src\etl\clean_csv.py:216:1: W293 [*] Blank line contains whitespace
    |
214 |             # Normalize whitespace but preserve content
215 |             df['content'] = df['content'].str.replace(r'\s+', ' ', regex=True).str.strip()
216 |             
    | ^^^^^^^^^^^^ W293
217 |             # Truncate very long messages (prevents DB issues)
218 |             MAX_CONTENT_LENGTH = 4000
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:220:1: W293 [*] Blank line contains whitespace
    |
218 |             MAX_CONTENT_LENGTH = 4000
219 |             df['content'] = df['content'].str[:MAX_CONTENT_LENGTH]
220 |             
    | ^^^^^^^^^^^^ W293
221 |         # Clean channel names
222 |         if 'channel' in df.columns:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:225:1: W293 [*] Blank line contains whitespace
    |
223 |             df['channel'] = df['channel'].str.lower().str.strip()
224 |             df['channel'] = df['channel'].str.replace(r'[^a-z0-9_-]', '', regex=True)
225 |             
    | ^^^^^^^^^^^^ W293
226 |         # Ensure message_id is string
227 |         if 'message_id' in df.columns:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:229:1: W293 [*] Blank line contains whitespace
    |
227 |         if 'message_id' in df.columns:
228 |             df['message_id'] = df['message_id'].astype(str)
229 |             
    | ^^^^^^^^^^^^ W293
230 |         return df
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:231:1: W293 [*] Blank line contains whitespace
    |
230 |         return df
231 |         
    | ^^^^^^^^ W293
232 |     def _clean_positions_table(self, df: pd.DataFrame) -> pd.DataFrame:
233 |         """Apply positions-specific cleaning rules."""
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:238:1: W293 [*] Blank line contains whitespace
    |
236 |             df['symbol'] = df['symbol'].str.upper().str.strip()
237 |             df['symbol'] = df['symbol'].str.replace(r'[^A-Z.]', '', regex=True)
238 |             
    | ^^^^^^^^^^^^ W293
239 |         # Ensure quantities are non-negative
240 |         numeric_cols = ['quantity', 'equity', 'price', 'average_buy_price']
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:244:1: W293 [*] Blank line contains whitespace
    |
242 |             if col in df.columns:
243 |                 df[col] = pd.to_numeric(df[col], errors='coerce').abs()
244 |                 
    | ^^^^^^^^^^^^^^^^ W293
245 |         return df
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:248:89: E501 Line too long (104 > 88)
    |
248 | def clean_csv_file(csv_path: Path, table_name: str, output_path: Optional[Path] = None) -> pd.DataFrame:
    |                                                                                         ^^^^^^^^^^^^^^^^ E501
249 |     """
250 |     Convenience function to clean a CSV file for a specific table.
    |

src\etl\clean_csv.py:251:1: W293 Blank line contains whitespace
    |
249 |     """
250 |     Convenience function to clean a CSV file for a specific table.
251 |     
    | ^^^^ W293
252 |     Args:
253 |         csv_path: Path to input CSV file
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:256:1: W293 Blank line contains whitespace
    |
254 |         table_name: Target table name (orders, positions, discord_messages)
255 |         output_path: Optional path to save cleaned CSV
256 |         
    | ^^^^^^^^ W293
257 |     Returns:
258 |         Cleaned pandas DataFrame
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:267:1: W293 Blank line contains whitespace
    |
265 |     """
266 |     Validate that cleaned data meets basic requirements.
267 |     
    | ^^^^ W293
268 |     Args:
269 |         df: Cleaned DataFrame
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:271:1: W293 Blank line contains whitespace
    |
269 |         df: Cleaned DataFrame
270 |         table_name: Target table name
271 |         
    | ^^^^^^^^ W293
272 |     Returns:
273 |         True if validation passes, False otherwise
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:276:1: W293 [*] Blank line contains whitespace
    |
274 |     """
275 |     required_cols = REQUIRED_COLUMNS.get(table_name, [])
276 |     
    | ^^^^ W293
277 |     # Check required columns exist
278 |     missing_cols = [col for col in required_cols if col not in df.columns]
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:282:1: W293 [*] Blank line contains whitespace
    |
280 |         logger.error(f"Validation failed: missing columns {missing_cols}")
281 |         return False
282 |         
    | ^^^^^^^^ W293
283 |     # Check for empty DataFrame
284 |     if len(df) == 0:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:287:1: W293 [*] Blank line contains whitespace
    |
285 |         logger.error("Validation failed: DataFrame is empty")
286 |         return False
287 |         
    | ^^^^^^^^ W293
288 |     # Check for nulls in required columns
289 |     for col in required_cols:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:292:89: E501 Line too long (93 > 88)
    |
290 |         null_count = df[col].isnull().sum()
291 |         if null_count > 0:
292 |             logger.error(f"Validation failed: {null_count} nulls in required column '{col}'")
    |                                                                                         ^^^^^ E501
293 |             return False
    |

src\etl\clean_csv.py:294:1: W293 [*] Blank line contains whitespace
    |
292 |             logger.error(f"Validation failed: {null_count} nulls in required column '{col}'")
293 |             return False
294 |             
    | ^^^^^^^^^^^^ W293
295 |     # Table-specific validations
296 |     if table_name == "orders" and 'action' in df.columns:
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:301:1: W293 [*] Blank line contains whitespace
    |
299 |             logger.error(f"Validation failed: invalid actions {list(invalid_actions)}")
300 |             return False
301 |             
    | ^^^^^^^^^^^^ W293
302 |     logger.info(f"Validation passed for {table_name} data: {len(df)} rows")
303 |     return True
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:309:1: W293 [*] Blank line contains whitespace
    |
307 |     # Example usage
308 |     import sys
309 |     
    | ^^^^ W293
310 |     if len(sys.argv) < 3:
311 |         print("Usage: python clean_csv.py <csv_path> <table_name> [output_path]")
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:313:1: W293 [*] Blank line contains whitespace
    |
311 |         print("Usage: python clean_csv.py <csv_path> <table_name> [output_path]")
312 |         sys.exit(1)
313 |         
    | ^^^^^^^^ W293
314 |     csv_path = Path(sys.argv[1])
315 |     table_name = sys.argv[2]
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:317:1: W293 [*] Blank line contains whitespace
    |
315 |     table_name = sys.argv[2]
316 |     output_path = Path(sys.argv[3]) if len(sys.argv) > 3 else None
317 |     
    | ^^^^ W293
318 |     logging.basicConfig(level=logging.INFO)
    |
    = help: Remove whitespace from blank line

src\etl\clean_csv.py:319:1: W293 [*] Blank line contains whitespace
    |
318 |     logging.basicConfig(level=logging.INFO)
319 |     
    | ^^^^ W293
320 |     try:
321 |         df = clean_csv_file(csv_path, table_name, output_path)
    |
    = help: Remove whitespace from blank line

src\generated_schemas.py:8:89: E501 Line too long (425 > 88)
   |
 6 | ΓÇª
 7 | ΓÇª
 8 | ΓÇªnced_snaptrade_schema.sql, 005_schema_alignment_fix.sql, 006_symbols_ticker_unique.sql, 007_update_orders_schema.sql, 008_comprehensive_schema_alignment.sql, 009_final_type_alignment.sql, 010_comprehensive_schema_cleanup.sql, 011_schema_type_alignment.sql, 012_complete_natural_key_implementation.sql, 013_final_orders_cleanup_and_indexes.sql
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
 9 | ΓÇª
10 | ΓÇª
   |

src\generated_schemas.py:303:89: E501 Line too long (7577 > 88)
    |
302 | ΓÇª
303 | ΓÇª'idx_discord_messages_message_id', 'columns': ['message_id'], 'unique': False}, {'name': 'idx_discord_messages_channel', 'columns': ['channel'], 'unique': False}, {'name': 'idx_discord_messages_timestamp', 'columns': ['timestamp'], 'unique': False}, {'name': 'idx_discord_messages_author', 'columns': ['author'], 'unique': False}, {'name': 'idx_discord_messages_timestamp', 'columns': ['timestamp'], 'unique': False}, {'name': 'idx_discord_messages_author', 'columns': ['author'], 'unique': False}, {'name': 'idx_discord_messages_channel', 'columns': ['channel'], 'unique': False}, {'name': 'idx_discord_messages_timestamp', 'columns': ['"timestamp"'], 'unique': False}, {'name': 'idx_discord_messages_author', 'columns': ['author'], 'unique': False}, {'name': 'idx_discord_messages_channel', 'columns': ['channel'], 'unique': False}, {'name': 'idx_discord_messages_author_id', 'columns': ['author_id'], 'unique': False}], 'twitter_data': [{'name': 'idx_twitter_data_tweet_id', 'columns': ['tweet_id'], 'unique': False}, {'name': 'idx_twitter_data_discord_message_id', 'columns': ['discord_message_id'], 'unique': False}, {'name': 'idx_twitter_data_stock_tags', 'columns': ['stock_tags'], 'unique': False}, {'name': 'idx_twitter_data_tweet_id', 'columns': ['tweet_id'], 'unique': False}, {'name': 'idx_twitter_data_discord_message_id', 'columns': ['discord_message_id'], 'unique': False}, {'name': 'idx_twitter_data_message_id', 'columns': ['message_id'], 'unique': False}, {'name': 'idx_twitter_data_message_id', 'columns': ['message_id'], 'unique': False}, {'name': 'idx_twitter_data_discord_date', 'columns': ['discord_date'], 'unique': False}, {'name': 'idx_twitter_data_tweet_date', 'columns': ['tweet_date'], 'unique': False}], 'discord_market_clean': [{'name': 'idx_discord_market_clean_message_id', 'columns': ['message_id'], 'unique': False}, {'name': 'idx_discord_market_clean_timestamp', 'columns': ['timestamp'], 'unique': False}, {'name': 'idx_discord_market_clean_sentiment', 'columns': ['sentiment'], 'unique': False}, {'name': 'idx_discord_market_clean_timestamp', 'columns': ['timestamp'], 'unique': False}, {'name': 'idx_discord_market_clean_timestamp', 'columns': ['"timestamp"'], 'unique': False}], 'discord_trading_clean': [{'name': 'idx_discord_trading_clean_message_id', 'columns': ['message_id'], 'unique': False}, {'name': 'idx_discord_trading_clean_timestamp', 'columns': ['timestamp'], 'unique': False}, {'name': 'idx_discord_trading_clean_stock_mentions', 'columns': ['stock_mentions'], 'unique': False}, {'name': 'idx_discord_trading_clean_sentiment', 'columns': ['sentiment'], 'unique': False}, {'name': 'idx_discord_trading_clean_timestamp', 'columns': ['timestamp'], 'unique': False}, {'name': 'idx_discord_trading_clean_timestamp', 'columns': ['"timestamp"'], 'unique': False}, {'name': 'idx_discord_trading_clean_stock_mentions', 'columns': ['stock_mentions'], 'unique': False}], 'processing_status': [{'name': 'idx_processing_status_message_id', 'columns': ['message_id'], 'unique': False}, {'name': 'idx_processing_status_channel', 'columns': ['channel'], 'unique': False}], 'daily_prices': [{'name': 'idx_daily_prices_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_daily_prices_date', 'columns': ['date'], 'unique': False}, {'name': 'idx_daily_prices_symbol_date', 'columns': ['symbol', 'date'], 'unique': False}, {'name': 'idx_daily_prices_date', 'columns': ['date'], 'unique': False}], 'realtime_prices': [{'name': 'idx_realtime_prices_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_realtime_prices_timestamp', 'columns': ['timestamp'], 'unique': False}, {'name': 'idx_realtime_prices_timestamp', 'columns': ['"timestamp"'], 'unique': False}], 'stock_metrics': [{'name': 'idx_stock_metrics_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_stock_metrics_date', 'columns': ['date'], 'unique': False}, {'name': 'idx_stock_metrics_date', 'columns': ['date'], 'unique': False}], 'orders': [{'name': 'idx_orders_brokerage_order_id', 'columns': ['brokerage_order_id'], 'unique': False}, {'name': 'idx_orders_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_orders_extracted_symbol', 'columns': ['extracted_symbol'], 'unique': False}, {'name': 'idx_orders_sync_timestamp', 'columns': ['sync_timestamp'], 'unique': False}, {'name': 'idx_orders_action', 'columns': ['action'], 'unique': False}, {'name': 'idx_orders_status', 'columns': ['status'], 'unique': False}, {'name': 'idx_orders_option_ticker', 'columns': ['option_ticker'], 'unique': False}, {'name': 'idx_orders_option_expiry', 'columns': ['option_expiry'], 'unique': False}, {'name': 'idx_orders_extracted_symbol', 'columns': ['extracted_symbol'], 'unique': False}, {'name': 'idx_orders_parent_brokerage_order_id', 'columns': ['parent_brokerage_order_id'], 'unique': False}, {'name': 'idx_orders_state', 'columns': ['state'], 'unique': False}, {'name': 'idx_orders_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_orders_time_placed', 'columns': ['time_placed'], 'unique': False}, {'name': 'idx_orders_account_id', 'columns': ['account_id'], 'unique': False}, {'name': 'idx_orders_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_orders_time_placed', 'columns': ['time_placed'], 'unique': False}, {'name': 'idx_orders_time_executed', 'columns': ['time_executed'], 'unique': False}, {'name': 'idx_orders_account_id', 'columns': ['account_id'], 'unique': False}, {'name': 'idx_orders_state', 'columns': ['state'], 'unique': False}, {'name': 'idx_orders_action', 'columns': ['action'], 'unique': False}], 'accounts': [{'name': 'idx_accounts_institution_name', 'columns': ['institution_name'], 'unique': False}, {'name': 'idx_accounts_sync_timestamp', 'columns': ['sync_timestamp'], 'unique': False}], 'account_balances': [{'name': 'idx_account_balances_account_id', 'columns': ['account_id'], 'unique': False}, {'name': 'idx_account_balances_snapshot_date', 'columns': ['snapshot_date'], 'unique': False}, {'name': 'idx_account_balances_snapshot_date', 'columns': ['snapshot_date'], 'unique': False}, {'name': 'idx_account_balances_account_id', 'columns': ['account_id'], 'unique': False}], 'symbols': [{'name': 'idx_symbols_ticker', 'columns': ['ticker'], 'unique': False}, {'name': 'idx_symbols_exchange_code', 'columns': ['exchange_code'], 'unique': False}, {'name': 'idx_symbols_asset_type', 'columns': ['asset_type'], 'unique': False}, {'name': 'idx_symbols_timezone', 'columns': ['timezone'], 'unique': False}, {'name': 'idx_symbols_ticker_unique', 'columns': ['ticker'], 'unique': True}], 'chart_metadata': [{'name': 'idx_chart_metadata_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_chart_metadata_created_at', 'columns': ['created_at'], 'unique': False}], 'discord_processing_log': [{'name': 'idx_discord_processing_log_message_id', 'columns': ['message_id'], 'unique': False}, {'name': 'idx_discord_processing_log_channel', 'columns': ['channel'], 'unique': False}], 'stock_charts': [{'name': 'idx_stock_charts_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_stock_charts_generated_at', 'columns': ['generated_at'], 'unique': False}, {'name': 'idx_stock_charts_chart_type', 'columns': ['chart_type'], 'unique': False}, {'name': 'idx_stock_charts_symbol', 'columns': ['symbol'], 'unique': False}, {'name': 'idx_stock_charts_generated_at', 'columns': ['generated_at'], 'unique': False}, {'name': 'idx_stock_charts_chart_type', 'columns': ['chart_type'], 'unique': False}]}
    |
304 | ΓÇª
305 | ΓÇª
    |

src\generated_schemas.py:306:89: E501 Line too long (1773 > 88)
    |
305 | ΓÇª
306 | ΓÇª'name': 'discord_market_clean_message_id_unique', 'definition': 'UNIQUE (message_id)'}, {'name': 'discord_market_clean_pkey', 'definition': 'PRIMARY KEY (message_id)'}], 'discord_trading_clean': [{'name': 'discord_trading_clean_message_id_unique', 'definition': 'UNIQUE (message_id)'}, {'name': 'discord_trading_clean_pkey', 'definition': 'PRIMARY KEY (message_id)'}], 'symbols': [{'name': 'symbols_ticker_unique', 'definition': 'UNIQUE (ticker)'}], 'twitter_data': [{'name': 'twitter_data_tweet_id_unique', 'definition': 'UNIQUE (tweet_id)'}, {'name': 'twitter_data_pkey', 'definition': 'PRIMARY KEY (tweet_id)'}], 'chart_metadata': [{'name': 'chart_metadata_symbol_period_interval_theme_unique', 'definition': 'UNIQUE (symbol, period, interval, theme)'}, {'name': 'chart_metadata_pkey', 'definition': 'PRIMARY KEY (symbol, period, interval, theme)'}], 'discord_processing_log': [{'name': 'discord_processing_log_message_id_channel_unique', 'definition': 'UNIQUE (message_id, channel)'}, {'name': 'discord_processing_log_pkey', 'definition': 'PRIMARY KEY (message_id, channel)'}], 'orders': [{'name': 'orders_pkey', 'definition': 'PRIMARY KEY (brokerage_order_id)'}], 'account_balances': [{'name': 'account_balances_pkey', 'definition': 'PRIMARY KEY (account_id, currency_code, snapshot_date)'}], 'processing_status': [{'name': 'processing_status_pkey', 'definition': 'PRIMARY KEY (message_id)'}], 'daily_prices': [{'name': 'daily_prices_pkey', 'definition': 'PRIMARY KEY (symbol, date)'}], 'realtime_prices': [{'name': 'realtime_prices_pkey', 'definition': 'PRIMARY KEY (symbol, timestamp)'}], 'stock_metrics': [{'name': 'stock_metrics_pkey', 'definition': 'PRIMARY KEY (symbol, date)'}]}
    |
307 | ΓÇª
308 | ΓÇª
    |

src\generated_schemas.py:311:89: E501 Line too long (460 > 88)
    |
309 | ΓÇª
310 | ΓÇª
311 | ΓÇªql', '004_enhanced_snaptrade_schema.sql', '005_schema_alignment_fix.sql', '006_symbols_ticker_unique.sql', '007_update_orders_schema.sql', '008_comprehensive_schema_alignment.sql', '009_final_type_alignment.sql', '010_comprehensive_schema_cleanup.sql', '011_schema_type_alignment.sql', '012_complete_natural_key_implementation.sql', '013_final_orders_cleanup_and_indexes.sql'],
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
312 | ΓÇª
313 | ΓÇª
    |

src\generated_schemas.py:317:38: W292 [*] No newline at end of file
    |
316 | # Legacy compatibility - map to old format for existing verification scripts
317 | SCHEMA_DEFINITIONS = EXPECTED_SCHEMAS
    |                                      ^ W292
    |
    = help: Add trailing newline

src\journal_generator.py:6:8: F401 [*] `time` imported but unused
  |
4 | import re
5 | import textwrap
6 | import time
  |        ^^^^ F401
7 | from datetime import datetime
8 | from pathlib import Path
  |
  = help: Remove unused import: `time`

src\journal_generator.py:65:89: E501 Line too long (92 > 88)
   |
64 |     Returns:
65 |         API key from environment variables, prioritizing GEMINI_API_KEY, then OPENAI_API_KEY
   |                                                                                         ^^^^ E501
66 |     """
67 |     # Prioritize Gemini as the primary LLM (free tier, reliable)
   |

src\journal_generator.py:244:89: E501 Line too long (91 > 88)
    |
242 |         start_pos = match.start()
243 |
244 |         # Get the end position (either the start of the next ticker or the end of the text)
    |                                                                                         ^^^ E501
245 |         end_pos = (
246 |             ticker_matches[i + 1].start()
    |

src\journal_generator.py:292:89: E501 Line too long (91 > 88)
    |
290 |         if not api_key:
291 |             logger.warning(
292 |                 "No GEMINI_API_KEY found in environment variables. Falling back to OpenAI."
    |                                                                                         ^^^ E501
293 |             )
294 |             return generate_with_openai(prompt, max_tokens)
    |

src\journal_generator.py:386:89: E501 Line too long (96 > 88)
    |
385 |         response = client.chat.completions.create(
386 |             model="gpt-4o-mini",  # Using gpt-4o-mini for cost-effective yet high-quality output
    |                                                                                         ^^^^^^^^ E501
387 |             messages=[
388 |                 {"role": "system", "content": "You are a financial writing assistant."},
    |

src\journal_generator.py:397:89: E501 Line too long (105 > 88)
    |
395 |     except ImportError:
396 |         logger.error("Neither Google GenerativeAI nor OpenAI modules are installed.")
397 |         return "Error: LLM libraries not installed. Install with: pip install openai google-generativeai"
    |                                                                                         ^^^^^^^^^^^^^^^^^ E501
398 |     except Exception as e:
399 |         logger.error(f"Error generating journal entry with OpenAI: {e}")
    |

src\journal_generator.py:456:89: E501 Line too long (99 > 88)
    |
454 | </prices>
455 |
456 | Return a concise update (<120 words) noting big movers, total value change, and any sentiment cues.
    |                                                                                         ^^^^^^^^^^^ E501
457 | """
    |

src\journal_generator.py:792:89: E501 Line too long (95 > 88)
    |
790 | {recent_stock_messages if recent_stock_messages else "No recent stock messages"}
791 |
792 | Write a concise daily journal entry (max 120 words) that summarizes the portfolio performance, 
    |                                                                                         ^^^^^^^ E501
793 | highlights key movers, and incorporates relevant sentiment from Discord discussions.
794 | The entry should be insightful, analytical, and provide context for the current portfolio state.
    |

src\journal_generator.py:792:95: W291 Trailing whitespace
    |
790 | {recent_stock_messages if recent_stock_messages else "No recent stock messages"}
791 |
792 | Write a concise daily journal entry (max 120 words) that summarizes the portfolio performance, 
    |                                                                                               ^ W291
793 | highlights key movers, and incorporates relevant sentiment from Discord discussions.
794 | The entry should be insightful, analytical, and provide context for the current portfolio state.
    |
    = help: Remove trailing whitespace

src\journal_generator.py:794:89: E501 Line too long (96 > 88)
    |
792 | Write a concise daily journal entry (max 120 words) that summarizes the portfolio performance, 
793 | highlights key movers, and incorporates relevant sentiment from Discord discussions.
794 | The entry should be insightful, analytical, and provide context for the current portfolio state.
    |                                                                                         ^^^^^^^^ E501
795 | """
    |

src\journal_generator.py:943:89: E501 Line too long (155 > 88)
    |
941 | ΓÇª
942 | ΓÇª
943 | ΓÇªet('quantity', 0):.2f} | ${pos.get('price', 0):.2f} | ${pos.get('equity', 0):.2f} | {change} |\n"
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
944 | ΓÇª
945 | ΓÇª
    |

src\journal_generator.py:956:89: E501 Line too long (122 > 88)
    |
954 | """
955 |         for pos in gainers:
956 |             md_content += f"| {pos.get('symbol')} | ${pos.get('price', 0):.2f} | +{pos.get('change_percent', 0):.2f}% |\n"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
957 |     else:
958 |         md_content += "No significant gainers today.\n"
    |

src\journal_generator.py:968:89: E501 Line too long (121 > 88)
    |
966 | """
967 |         for pos in losers:
968 |             md_content += f"| {pos.get('symbol')} | ${pos.get('price', 0):.2f} | {pos.get('change_percent', 0):.2f}% |\n"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
969 |     else:
970 |         md_content += "No significant losers today.\n"
    |

src\journal_generator.py:976:89: E501 Line too long (100 > 88)
    |
975 |     md_content += "\n## Discord Activity\n"
976 |     md_content += f"- Overall sentiment: {sentiment_analysis.get('overall_sentiment', 'neutral')}\n"
    |                                                                                         ^^^^^^^^^^^^ E501
977 |     md_content += f"- Message count: {sentiment_analysis.get('message_count', 0)} market-related messages\n"
    |

src\journal_generator.py:977:89: E501 Line too long (108 > 88)
    |
975 |     md_content += "\n## Discord Activity\n"
976 |     md_content += f"- Overall sentiment: {sentiment_analysis.get('overall_sentiment', 'neutral')}\n"
977 |     md_content += f"- Message count: {sentiment_analysis.get('message_count', 0)} market-related messages\n"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
978 |
979 |     # Most mentioned tickers
    |

src\journal_generator.py:1073:89: E501 Line too long (100 > 88)
     |
1071 |     # Create a command-line interface for more flexible usage
1072 |     parser = argparse.ArgumentParser(
1073 |         description="Generate portfolio journal entries based on trading data and Discord sentiment"
     |                                                                                         ^^^^^^^^^^^^ E501
1074 |     )
1075 |     parser.add_argument(
     |

src\journal_generator.py:1156:89: E501 Line too long (118 > 88)
     |
1154 | #
1155 | # 5. All custom paths:
1156 | #    python -m src.journal_generator -p custom_positions.csv -d custom_discord.csv -pr custom_prices.csv -o ./journals
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1157 | #
1158 | # 6. Mix of short and long argument forms:
     |

src\logging_utils.py:4:33: F401 [*] `src.message_cleaner.extract_ticker_symbols` imported but unused
  |
2 | from pathlib import Path
3 |
4 | from src.message_cleaner import extract_ticker_symbols
  |                                 ^^^^^^^^^^^^^^^^^^^^^^ F401
5 | from src.db import mark_message_processed, execute_sql
6 | from src.twitter_analysis import (
  |
  = help: Remove unused import: `src.message_cleaner.extract_ticker_symbols`

src\logging_utils.py:7:5: F401 [*] `src.twitter_analysis.analyze_sentiment` imported but unused
  |
5 | from src.db import mark_message_processed, execute_sql
6 | from src.twitter_analysis import (
7 |     analyze_sentiment,
  |     ^^^^^^^^^^^^^^^^^ F401
8 |     detect_twitter_links,
9 |     extract_tweet_id,
  |
  = help: Remove unused import

src\logging_utils.py:8:5: F401 [*] `src.twitter_analysis.detect_twitter_links` imported but unused
   |
 6 | from src.twitter_analysis import (
 7 |     analyze_sentiment,
 8 |     detect_twitter_links,
   |     ^^^^^^^^^^^^^^^^^^^^ F401
 9 |     extract_tweet_id,
10 |     fetch_tweet_data,
   |
   = help: Remove unused import

src\logging_utils.py:56:90: E501 Line too long (89 > 88)
   |
54 |             else:
55 |                 logger.warning(
56 |                     "ΓÜá∩╕Å Failed to log to Supabase, falling back to unified database layer"
   |                                                                                         ^ E501
57 |                 )
58 |                 raise Exception("Supabase write failed")
   |

src\logging_utils.py:63:89: E501 Line too long (96 > 88)
   |
61 |             # Fallback to unified database layer
62 |
63 |             # Insert message into discord_messages table using upsert (no need for manual check)
   |                                                                                         ^^^^^^^^ E501
64 |             execute_sql(
65 |                 """
   |

src\logging_utils.py:66:45: W291 Trailing whitespace
   |
64 |             execute_sql(
65 |                 """
66 |                 INSERT INTO discord_messages 
   |                                             ^ W291
67 |                 (message_id, author, content, channel, timestamp)
68 |                 VALUES (?, ?, ?, ?, ?)
   |
   = help: Remove trailing whitespace

src\logging_utils.py:101:57: W291 Trailing whitespace
    |
 99 | ΓÇª                     execute_sql(
100 | ΓÇª                         """
101 | ΓÇª                         INSERT INTO twitter_data 
    |                                                   ^ W291
102 | ΓÇª                         (message_id, discord_date, tweet_date, content, stock_tags, author, channel)
103 | ΓÇª                         VALUES (?, ?, ?, ?, ?, ?, ?)
    |
    = help: Remove trailing whitespace

src\logging_utils.py:102:89: E501 Line too long (108 > 88)
    |
100 | ΓÇª                         """
101 | ΓÇª                         INSERT INTO twitter_data 
102 | ΓÇª                         (message_id, discord_date, tweet_date, content, stock_tags, author, channel)
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^ E501
103 | ΓÇª                         VALUES (?, ?, ?, ?, ?, ?, ?)
104 | ΓÇª                     """,
    |

src\market_data.py:57:29: W291 Trailing whitespace
   |
55 |     try:
56 |         query = """
57 |         SELECT * FROM trades 
   |                             ^ W291
58 |         WHERE symbol = ? 
59 |         ORDER BY timestamp DESC 
   |
   = help: Remove trailing whitespace

src\market_data.py:58:25: W291 Trailing whitespace
   |
56 |         query = """
57 |         SELECT * FROM trades 
58 |         WHERE symbol = ? 
   |                         ^ W291
59 |         ORDER BY timestamp DESC 
60 |         LIMIT ?
   |
   = help: Remove trailing whitespace

src\market_data.py:59:32: W291 Trailing whitespace
   |
57 |         SELECT * FROM trades 
58 |         WHERE symbol = ? 
59 |         ORDER BY timestamp DESC 
   |                                ^ W291
60 |         LIMIT ?
61 |         """
   |
   = help: Remove trailing whitespace

src\message_cleaner.py:21:5: E731 Do not assign a `lambda` expression, use a `def`
   |
19 | except ImportError:
20 |     # Fallback for environments without SQLAlchemy
21 |     text = lambda x: x
   |     ^^^^^^^^^^^^^^^^^^ E731
22 |
23 | logger = logging.getLogger(__name__)
   |
   = help: Rewrite `text` as a `def`

src\message_cleaner.py:160:89: E501 Line too long (89 > 88)
    |
158 |     Args:
159 |         messages: Raw messages as DataFrame or list of dicts
160 |         channel_type: Type of channel ("trading" or "general") for specialized processing
    |                                                                                         ^ E501
161 |         deduplication_key: Column name to use for deduplication
    |

src\message_cleaner.py:415:89: E501 Line too long (102 > 88)
    |
413 |                 VALUES ({placeholders})
414 |                 ON CONFLICT (message_id) DO UPDATE SET
415 |                     {", ".join([f"{col} = EXCLUDED.{col}" for col in columns if col != "message_id"])}
    |                                                                                         ^^^^^^^^^^^^^^ E501
416 |                 """
417 |             else:
    |

src\position_analysis.py:11:89: E501 Line too long (92 > 88)
   |
11 | def analyze_position_history(symbol: str, start_date: datetime, end_date: datetime) -> Dict:
   |                                                                                         ^^^^ E501
12 |     """
13 |     Analyze complete position history for a symbol including:
   |

src\position_analysis.py:18:1: W293 Blank line contains whitespace
   |
16 |     - Unrealized vs realized P/L
17 |     - Trade frequency and patterns
18 |     
   | ^^^^ W293
19 |     Args:
20 |         symbol: Stock ticker symbol
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:23:1: W293 Blank line contains whitespace
   |
21 |         start_date: Analysis start date
22 |         end_date: Analysis end date
23 |         
   | ^^^^^^^^ W293
24 |     Returns:
25 |         Dictionary containing comprehensive position analysis
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:27:1: W293 [*] Blank line contains whitespace
   |
25 |         Dictionary containing comprehensive position analysis
26 |     """
27 |     
   | ^^^^ W293
28 |     # Get trade data using chart.py function
29 |     from src.bot.commands.chart import query_trade_data
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:33:1: W293 [*] Blank line contains whitespace
   |
31 |     if trade_data.empty:
32 |         return {"error": "No trade data found"}
33 |     
   | ^^^^ W293
34 |     # Get current position from positions table
35 |     get_current_position_size(symbol)
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:36:1: W293 [*] Blank line contains whitespace
   |
34 |     # Get current position from positions table
35 |     get_current_position_size(symbol)
36 |     
   | ^^^^ W293
37 |     # Calculate position evolution
38 |     position_timeline = []
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:41:1: W293 [*] Blank line contains whitespace
   |
39 |     cost_basis_timeline = []
40 |     pnl_timeline = []
41 |     
   | ^^^^ W293
42 |     running_shares = 0
43 |     total_cost = 0
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:45:1: W293 [*] Blank line contains whitespace
   |
43 |     total_cost = 0
44 |     total_realized_pnl = 0
45 |     
   | ^^^^ W293
46 |     for _, trade in trade_data.iterrows():
47 |         action = trade['action'].lower()
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:51:1: W293 [*] Blank line contains whitespace
   |
49 |         price = float(trade['execution_price'])
50 |         trade_value = shares * price
51 |         
   | ^^^^^^^^ W293
52 |         if action == 'buy':
53 |             running_shares += shares
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:56:1: W293 [*] Blank line contains whitespace
   |
54 |             total_cost += trade_value
55 |             avg_cost_basis = total_cost / running_shares if running_shares > 0 else 0
56 |             
   | ^^^^^^^^^^^^ W293
57 |         elif action == 'sell':
58 |             # Calculate realized P/L (simplified - could use FIFO for precision)
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:63:1: W293 [*] Blank line contains whitespace
   |
61 |                 realized_pnl = (price - avg_cost_basis) * shares
62 |                 total_realized_pnl += realized_pnl
63 |                 
   | ^^^^^^^^^^^^^^^^ W293
64 |                 # Update position
65 |                 running_shares -= shares
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:68:89: E501 Line too long (90 > 88)
   |
66 |                 if running_shares > 0:
67 |                     # Proportionally reduce cost basis
68 |                     total_cost = total_cost * (running_shares / (running_shares + shares))
   |                                                                                         ^^ E501
69 |                 else:
70 |                     total_cost = 0
   |

src\position_analysis.py:71:1: W293 [*] Blank line contains whitespace
   |
69 |                 else:
70 |                     total_cost = 0
71 |         
   | ^^^^^^^^ W293
72 |         # Record timeline point
73 |         position_timeline.append({
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:80:1: W293 [*] Blank line contains whitespace
   |
78 |             'trade_shares': shares
79 |         })
80 |         
   | ^^^^^^^^ W293
81 |         cost_basis_timeline.append({
82 |             'date': trade['execution_date'],
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:86:1: W293 [*] Blank line contains whitespace
   |
84 |             'total_cost': total_cost
85 |         })
86 |         
   | ^^^^^^^^ W293
87 |         pnl_timeline.append({
88 |             'date': trade['execution_date'],
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:92:1: W293 [*] Blank line contains whitespace
   |
90 |             'trade_pnl': realized_pnl if action == 'sell' else 0
91 |         })
92 |     
   | ^^^^ W293
93 |     # Calculate current unrealized P/L if position exists
94 |     current_price = get_current_price(symbol)
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:96:89: E501 Line too long (103 > 88)
   |
94 |     current_price = get_current_price(symbol)
95 |     current_cost_basis = total_cost / running_shares if running_shares > 0 else 0
96 |     unrealized_pnl = (current_price - current_cost_basis) * running_shares if running_shares > 0 else 0
   |                                                                                         ^^^^^^^^^^^^^^^ E501
97 |     
98 |     # Trading pattern analysis
   |

src\position_analysis.py:97:1: W293 [*] Blank line contains whitespace
   |
95 |     current_cost_basis = total_cost / running_shares if running_shares > 0 else 0
96 |     unrealized_pnl = (current_price - current_cost_basis) * running_shares if running_shares > 0 else 0
97 |     
   | ^^^^ W293
98 |     # Trading pattern analysis
99 |     buy_trades = trade_data[trade_data['action'].str.lower() == 'buy']
   |
   = help: Remove whitespace from blank line

src\position_analysis.py:101:1: W293 [*] Blank line contains whitespace
    |
 99 |     buy_trades = trade_data[trade_data['action'].str.lower() == 'buy']
100 |     sell_trades = trade_data[trade_data['action'].str.lower() == 'sell']
101 |     
    | ^^^^ W293
102 |     analysis = {
103 |         'symbol': symbol,
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:112:89: E501 Line too long (96 > 88)
    |
110 |             'current_cost_basis': current_cost_basis,
111 |             'current_market_value': running_shares * current_price,
112 |             'total_invested': sum(buy_trades['execution_price'] * buy_trades['total_quantity']),
    |                                                                                         ^^^^^^^^ E501
113 |             'total_divested': sum(sell_trades['execution_price'] * sell_trades['total_quantity']),
114 |             'realized_pnl': total_realized_pnl,
    |

src\position_analysis.py:113:89: E501 Line too long (98 > 88)
    |
111 |             'current_market_value': running_shares * current_price,
112 |             'total_invested': sum(buy_trades['execution_price'] * buy_trades['total_quantity']),
113 |             'total_divested': sum(sell_trades['execution_price'] * sell_trades['total_quantity']),
    |                                                                                         ^^^^^^^^^^ E501
114 |             'realized_pnl': total_realized_pnl,
115 |             'unrealized_pnl': unrealized_pnl,
    |

src\position_analysis.py:122:89: E501 Line too long (97 > 88)
    |
120 |             'buy_trades': len(buy_trades),
121 |             'sell_trades': len(sell_trades),
122 |             'avg_buy_price': buy_trades['execution_price'].mean() if not buy_trades.empty else 0,
    |                                                                                         ^^^^^^^^^ E501
123 |             'avg_sell_price': sell_trades['execution_price'].mean() if not sell_trades.empty else 0,
124 |             'largest_buy': buy_trades['total_quantity'].max() if not buy_trades.empty else 0,
    |

src\position_analysis.py:123:89: E501 Line too long (100 > 88)
    |
121 |             'sell_trades': len(sell_trades),
122 |             'avg_buy_price': buy_trades['execution_price'].mean() if not buy_trades.empty else 0,
123 |             'avg_sell_price': sell_trades['execution_price'].mean() if not sell_trades.empty else 0,
    |                                                                                         ^^^^^^^^^^^^ E501
124 |             'largest_buy': buy_trades['total_quantity'].max() if not buy_trades.empty else 0,
125 |             'largest_sell': sell_trades['total_quantity'].max() if not sell_trades.empty else 0
    |

src\position_analysis.py:124:89: E501 Line too long (93 > 88)
    |
122 |             'avg_buy_price': buy_trades['execution_price'].mean() if not buy_trades.empty else 0,
123 |             'avg_sell_price': sell_trades['execution_price'].mean() if not sell_trades.empty else 0,
124 |             'largest_buy': buy_trades['total_quantity'].max() if not buy_trades.empty else 0,
    |                                                                                         ^^^^^ E501
125 |             'largest_sell': sell_trades['total_quantity'].max() if not sell_trades.empty else 0
126 |         },
    |

src\position_analysis.py:125:89: E501 Line too long (95 > 88)
    |
123 |             'avg_sell_price': sell_trades['execution_price'].mean() if not sell_trades.empty else 0,
124 |             'largest_buy': buy_trades['total_quantity'].max() if not buy_trades.empty else 0,
125 |             'largest_sell': sell_trades['total_quantity'].max() if not sell_trades.empty else 0
    |                                                                                         ^^^^^^^ E501
126 |         },
127 |         'timeline_data': {
    |

src\position_analysis.py:133:1: W293 [*] Blank line contains whitespace
    |
131 |         }
132 |     }
133 |     
    | ^^^^ W293
134 |     return analysis
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:141:1: W293 [*] Blank line contains whitespace
    |
139 |     try:
140 |         from src.db import execute_sql
141 |         
    | ^^^^^^^^ W293
142 |         result = execute_sql("""
143 |             SELECT quantity FROM positions 
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:143:43: W291 Trailing whitespace
    |
142 |         result = execute_sql("""
143 |             SELECT quantity FROM positions 
    |                                           ^ W291
144 |             WHERE symbol = ? AND sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions WHERE symbol = ?)
145 |         """, (symbol, symbol), fetch_results=True)
    |
    = help: Remove trailing whitespace

src\position_analysis.py:144:89: E501 Line too long (110 > 88)
    |
142 |         result = execute_sql("""
143 |             SELECT quantity FROM positions 
144 |             WHERE symbol = ? AND sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions WHERE symbol = ?)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^ E501
145 |         """, (symbol, symbol), fetch_results=True)
    |

src\position_analysis.py:146:1: W293 [*] Blank line contains whitespace
    |
144 |             WHERE symbol = ? AND sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions WHERE symbol = ?)
145 |         """, (symbol, symbol), fetch_results=True)
146 |         
    | ^^^^^^^^ W293
147 |         if result:
148 |             try:
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:162:1: W293 [*] Blank line contains whitespace
    |
160 |     try:
161 |         from src.db import execute_sql
162 |         
    | ^^^^^^^^ W293
163 |         result = execute_sql("""
164 |             SELECT price FROM realtime_prices 
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:164:46: W291 Trailing whitespace
    |
163 |         result = execute_sql("""
164 |             SELECT price FROM realtime_prices 
    |                                              ^ W291
165 |             WHERE symbol = ? ORDER BY timestamp DESC LIMIT 1
166 |         """, (symbol,), fetch_results=True)
    |
    = help: Remove trailing whitespace

src\position_analysis.py:167:1: W293 [*] Blank line contains whitespace
    |
165 |             WHERE symbol = ? ORDER BY timestamp DESC LIMIT 1
166 |         """, (symbol,), fetch_results=True)
167 |         
    | ^^^^^^^^ W293
168 |         if result:
169 |             try:
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:182:1: W293 Blank line contains whitespace
    |
180 |     """
181 |     Create enhanced annotations for charts based on position analysis.
182 |     
    | ^^^^ W293
183 |     Args:
184 |         position_analysis: Output from analyze_position_history
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:185:1: W293 Blank line contains whitespace
    |
183 |     Args:
184 |         position_analysis: Output from analyze_position_history
185 |         
    | ^^^^^^^^ W293
186 |     Returns:
187 |         List of annotation objects for chart overlay
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:190:1: W293 [*] Blank line contains whitespace
    |
188 |     """
189 |     annotations = []
190 |     
    | ^^^^ W293
191 |     # Add position size annotations at key points
192 |     timeline = position_analysis.get('timeline_data', {}).get('position_evolution', [])
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:193:1: W293 [*] Blank line contains whitespace
    |
191 |     # Add position size annotations at key points
192 |     timeline = position_analysis.get('timeline_data', {}).get('position_evolution', [])
193 |     
    | ^^^^ W293
194 |     for i, point in enumerate(timeline):
195 |         # Add annotation for significant position changes
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:196:89: E501 Line too long (118 > 88)
    |
194 |     for i, point in enumerate(timeline):
195 |         # Add annotation for significant position changes
196 |         if i == 0 or abs(point['position_size'] - timeline[i-1]['position_size']) > 50:  # Threshold for "significant"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
197 |             annotations.append({
198 |                 'date': point['date'],
    |

src\position_analysis.py:203:1: W293 [*] Blank line contains whitespace
    |
201 |                 'value': point['position_size']
202 |             })
203 |     
    | ^^^^ W293
204 |     # Add cost basis annotations
205 |     cost_timeline = position_analysis.get('timeline_data', {}).get('cost_basis_evolution', [])
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:205:89: E501 Line too long (94 > 88)
    |
204 |     # Add cost basis annotations
205 |     cost_timeline = position_analysis.get('timeline_data', {}).get('cost_basis_evolution', [])
    |                                                                                         ^^^^^^ E501
206 |     if cost_timeline:
207 |         final_cost_basis = cost_timeline[-1]['avg_cost_basis']
    |

src\position_analysis.py:215:1: W293 [*] Blank line contains whitespace
    |
213 |                 'value': final_cost_basis
214 |             })
215 |     
    | ^^^^ W293
216 |     # Add P/L milestones
217 |     summary = position_analysis.get('position_summary', {})
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:225:1: W293 [*] Blank line contains whitespace
    |
223 |             'value': summary['total_pnl']
224 |         })
225 |     
    | ^^^^ W293
226 |     return annotations
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:229:89: E501 Line too long (91 > 88)
    |
229 | def generate_position_report(symbol: str, start_date: datetime, end_date: datetime) -> str:
    |                                                                                         ^^^ E501
230 |     """
231 |     Generate a comprehensive text report of position management.
    |

src\position_analysis.py:232:1: W293 Blank line contains whitespace
    |
230 |     """
231 |     Generate a comprehensive text report of position management.
232 |     
    | ^^^^ W293
233 |     Args:
234 |         symbol: Stock ticker symbol
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:237:1: W293 Blank line contains whitespace
    |
235 |         start_date: Analysis start date
236 |         end_date: Analysis end date
237 |         
    | ^^^^^^^^ W293
238 |     Returns:
239 |         Formatted text report
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:242:1: W293 [*] Blank line contains whitespace
    |
240 |     """
241 |     analysis = analyze_position_history(symbol, start_date, end_date)
242 |     
    | ^^^^ W293
243 |     if 'error' in analysis:
244 |         return f"Γ¥î {analysis['error']}"
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:245:1: W293 [*] Blank line contains whitespace
    |
243 |     if 'error' in analysis:
244 |         return f"Γ¥î {analysis['error']}"
245 |     
    | ^^^^ W293
246 |     summary = analysis['position_summary']
247 |     activity = analysis['trading_activity']
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:248:1: W293 [*] Blank line contains whitespace
    |
246 |     summary = analysis['position_summary']
247 |     activity = analysis['trading_activity']
248 |     
    | ^^^^ W293
249 |     report = f"""
250 | ≡ƒôè **Position Analysis Report: ${symbol}**
    |
    = help: Remove whitespace from blank line

src\position_analysis.py:270:89: E501 Line too long (110 > 88)
    |
268 | **Performance Metrics:**
269 | ΓÇó Win Rate: {(summary['realized_pnl'] > 0) * 100:.0f}% (realized)
270 | ΓÇó ROI: {(summary['total_pnl'] / summary['total_invested'] * 100) if summary['total_invested'] > 0 else 0:.1f}%
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^ E501
271 | """
    |

src\position_analysis.py:272:1: W293 [*] Blank line contains whitespace
    |
270 | ΓÇó ROI: {(summary['total_pnl'] / summary['total_invested'] * 100) if summary['total_invested'] > 0 else 0:.1f}%
271 | """
272 |     
    | ^^^^ W293
273 |     return report.strip()
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:14:1: W293 Blank line contains whitespace
   |
12 | Usage:
13 |     from src.retry_utils import hardened_retry
14 |     
   | ^^^^ W293
15 |     @hardened_retry(max_retries=3, delay=1)
16 |     def risky_operation():
   |
   = help: Remove whitespace from blank line

src\retry_utils.py:21:55: W291 Trailing whitespace
   |
20 | Non-retryable exceptions:
21 | - sqlalchemy.exc.ArgumentError: SQL parameter mismatch  
   |                                                       ^^ W291
22 | - pandas.errors.ParserError: CSV parsing failure
23 | - ValueError: Often indicates data format issues
   |
   = help: Remove trailing whitespace

src\retry_utils.py:31:35: F401 [*] `typing.Tuple` imported but unused
   |
29 | import logging
30 | import time
31 | from typing import Callable, Any, Tuple, Type
   |                                   ^^^^^ F401
32 |
33 | # Import exceptions that should NOT be retried
   |
   = help: Remove unused import

src\retry_utils.py:31:42: F401 [*] `typing.Type` imported but unused
   |
29 | import logging
30 | import time
31 | from typing import Callable, Any, Tuple, Type
   |                                          ^^^^ F401
32 |
33 | # Import exceptions that should NOT be retried
   |
   = help: Remove unused import

src\retry_utils.py:65:37: W291 [*] Trailing whitespace
   |
63 |     ])
64 |
65 | # Add Pandas exceptions if available  
   |                                     ^^ W291
66 | if PANDAS_AVAILABLE:
67 |     NON_RETRYABLE.extend([
   |
   = help: Remove trailing whitespace

src\retry_utils.py:76:89: E501 Line too long (90 > 88)
   |
76 | def hardened_retry(max_retries: int = 3, delay: float = 1.0, backoff_factor: float = 2.0):
   |                                                                                         ^^ E501
77 |     """
78 |     Hardened retry decorator that prevents infinite loops on non-retryable errors.
   |

src\retry_utils.py:79:1: W293 Blank line contains whitespace
   |
77 |     """
78 |     Hardened retry decorator that prevents infinite loops on non-retryable errors.
79 |     
   | ^^^^ W293
80 |     Args:
81 |         max_retries: Maximum number of retry attempts
   |
   = help: Remove whitespace from blank line

src\retry_utils.py:84:1: W293 Blank line contains whitespace
   |
82 |         delay: Initial delay between retries in seconds
83 |         backoff_factor: Factor to multiply delay by after each retry
84 |         
   | ^^^^^^^^ W293
85 |     Returns:
86 |         Decorated function with hardened retry logic
   |
   = help: Remove whitespace from blank line

src\retry_utils.py:87:1: W293 Blank line contains whitespace
   |
85 |     Returns:
86 |         Decorated function with hardened retry logic
87 |         
   | ^^^^^^^^ W293
88 |     Raises:
89 |         Immediately raises non-retryable exceptions without retrying
   |
   = help: Remove whitespace from blank line

src\retry_utils.py:97:1: W293 [*] Blank line contains whitespace
   |
95 |             current_delay = delay
96 |             last_exception = None
97 |             
   | ^^^^^^^^^^^^ W293
98 |             while retries <= max_retries:
99 |                 try:
   |
   = help: Remove whitespace from blank line

src\retry_utils.py:101:1: W293 [*] Blank line contains whitespace
    |
 99 |                 try:
100 |                     return func(*args, **kwargs)
101 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
102 |                 except NON_RETRYABLE_EXCEPTIONS as e:
103 |                     # Immediately raise non-retryable exceptions
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:105:89: E501 Line too long (94 > 88)
    |
103 |                     # Immediately raise non-retryable exceptions
104 |                     logger.error(
105 |                         f"Non-retryable exception in {func.__name__}: {type(e).__name__}: {e}"
    |                                                                                         ^^^^^^ E501
106 |                     )
107 |                     raise
    |

src\retry_utils.py:108:1: W293 [*] Blank line contains whitespace
    |
106 |                     )
107 |                     raise
108 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
109 |                 except Exception as e:
110 |                     last_exception = e
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:112:1: W293 [*] Blank line contains whitespace
    |
110 |                     last_exception = e
111 |                     retries += 1
112 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
113 |                     if retries > max_retries:
114 |                         logger.error(
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:115:89: E501 Line too long (92 > 88)
    |
113 |                     if retries > max_retries:
114 |                         logger.error(
115 |                             f"Function {func.__name__} failed after {max_retries} retries. "
    |                                                                                         ^^^^ E501
116 |                             f"Final error: {type(e).__name__}: {e}"
117 |                         )
    |

src\retry_utils.py:119:1: W293 [*] Blank line contains whitespace
    |
117 |                         )
118 |                         raise last_exception
119 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
120 |                     logger.warning(
121 |                         f"Retry {retries}/{max_retries} for {func.__name__} after "
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:124:1: W293 [*] Blank line contains whitespace
    |
122 |                         f"{type(e).__name__}: {e}. Waiting {current_delay:.1f}s..."
123 |                     )
124 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
125 |                     time.sleep(current_delay)
126 |                     current_delay *= backoff_factor
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:127:1: W293 [*] Blank line contains whitespace
    |
125 |                     time.sleep(current_delay)
126 |                     current_delay *= backoff_factor
127 |             
    | ^^^^^^^^^^^^ W293
128 |             # This should never be reached, but for safety
129 |             if last_exception:
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:132:89: E501 Line too long (99 > 88)
    |
130 |                 raise last_exception
131 |             else:
132 |                 raise RuntimeError(f"Function {func.__name__} failed without raising an exception")
    |                                                                                         ^^^^^^^^^^^ E501
133 |                 
134 |         return wrapper
    |

src\retry_utils.py:133:1: W293 [*] Blank line contains whitespace
    |
131 |             else:
132 |                 raise RuntimeError(f"Function {func.__name__} failed without raising an exception")
133 |                 
    | ^^^^^^^^^^^^^^^^ W293
134 |         return wrapper
135 |     return decorator
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:141:1: W293 Blank line contains whitespace
    |
139 |     """
140 |     Specialized retry decorator for database operations.
141 |     
    | ^^^^ W293
142 |     This version includes database-specific exceptions and is more conservative
143 |     about what gets retried.
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:144:1: W293 Blank line contains whitespace
    |
142 |     This version includes database-specific exceptions and is more conservative
143 |     about what gets retried.
144 |     
    | ^^^^ W293
145 |     Args:
146 |         max_retries: Maximum number of retry attempts
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:151:1: W293 [*] Blank line contains whitespace
    |
149 |     # Database-specific non-retryable exceptions
150 |     db_non_retryable = list(NON_RETRYABLE_EXCEPTIONS)
151 |     
    | ^^^^ W293
152 |     if SQLALCHEMY_AVAILABLE:
153 |         db_non_retryable.extend([
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:158:1: W293 [*] Blank line contains whitespace
    |
156 |             sqlalchemy.exc.ProgrammingError,  # SQL syntax errors
157 |         ])
158 |     
    | ^^^^ W293
159 |     db_non_retryable_tuple = tuple(db_non_retryable)
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:160:1: W293 [*] Blank line contains whitespace
    |
159 |     db_non_retryable_tuple = tuple(db_non_retryable)
160 |     
    | ^^^^ W293
161 |     def decorator(func: Callable) -> Callable:
162 |         @functools.wraps(func)
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:167:1: W293 [*] Blank line contains whitespace
    |
165 |             current_delay = delay
166 |             last_exception = None
167 |             
    | ^^^^^^^^^^^^ W293
168 |             while retries <= max_retries:
169 |                 try:
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:171:1: W293 [*] Blank line contains whitespace
    |
169 |                 try:
170 |                     return func(*args, **kwargs)
171 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
172 |                 except db_non_retryable_tuple as e:
173 |                     # Immediately raise non-retryable database exceptions
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:179:1: W293 [*] Blank line contains whitespace
    |
177 |                     )
178 |                     raise
179 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
180 |                 except Exception as e:
181 |                     last_exception = e
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:183:1: W293 [*] Blank line contains whitespace
    |
181 |                     last_exception = e
182 |                     retries += 1
183 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
184 |                     if retries > max_retries:
185 |                         logger.error(
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:186:89: E501 Line too long (102 > 88)
    |
184 |                     if retries > max_retries:
185 |                         logger.error(
186 |                             f"Database operation {func.__name__} failed after {max_retries} retries. "
    |                                                                                         ^^^^^^^^^^^^^^ E501
187 |                             f"Final error: {type(e).__name__}: {e}"
188 |                         )
    |

src\retry_utils.py:190:1: W293 [*] Blank line contains whitespace
    |
188 |                         )
189 |                         raise last_exception
190 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
191 |                     logger.warning(
192 |                         f"Database retry {retries}/{max_retries} for {func.__name__} after "
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:192:89: E501 Line too long (92 > 88)
    |
191 |                     logger.warning(
192 |                         f"Database retry {retries}/{max_retries} for {func.__name__} after "
    |                                                                                         ^^^^ E501
193 |                         f"{type(e).__name__}: {e}. Waiting {current_delay:.1f}s..."
194 |                     )
    |

src\retry_utils.py:195:1: W293 [*] Blank line contains whitespace
    |
193 |                         f"{type(e).__name__}: {e}. Waiting {current_delay:.1f}s..."
194 |                     )
195 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
196 |                     time.sleep(current_delay)
197 |                     current_delay *= 2  # Fixed 2x backoff for database operations
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:198:1: W293 [*] Blank line contains whitespace
    |
196 |                     time.sleep(current_delay)
197 |                     current_delay *= 2  # Fixed 2x backoff for database operations
198 |             
    | ^^^^^^^^^^^^ W293
199 |             # This should never be reached, but for safety
200 |             if last_exception:
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:203:89: E501 Line too long (109 > 88)
    |
201 |                 raise last_exception
202 |             else:
203 |                 raise RuntimeError(f"Database operation {func.__name__} failed without raising an exception")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
204 |                 
205 |         return wrapper
    |

src\retry_utils.py:204:1: W293 [*] Blank line contains whitespace
    |
202 |             else:
203 |                 raise RuntimeError(f"Database operation {func.__name__} failed without raising an exception")
204 |                 
    | ^^^^^^^^^^^^^^^^ W293
205 |         return wrapper
206 |     return decorator
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:212:1: W293 Blank line contains whitespace
    |
210 |     """
211 |     Specialized retry decorator for CSV processing operations.
212 |     
    | ^^^^ W293
213 |     Very conservative retries since CSV parsing errors are usually permanent.
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:214:1: W293 Blank line contains whitespace
    |
213 |     Very conservative retries since CSV parsing errors are usually permanent.
214 |     
    | ^^^^ W293
215 |     Args:
216 |         max_retries: Maximum number of retry attempts (default: 2)
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:221:1: W293 [*] Blank line contains whitespace
    |
219 |     # CSV-specific non-retryable exceptions
220 |     csv_non_retryable = list(NON_RETRYABLE_EXCEPTIONS)
221 |     
    | ^^^^ W293
222 |     if PANDAS_AVAILABLE:
223 |         # Most pandas errors are not worth retrying
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:228:1: W293 [*] Blank line contains whitespace
    |
226 |             pandas.errors.PerformanceWarning,
227 |         ])
228 |     
    | ^^^^ W293
229 |     csv_non_retryable_tuple = tuple(csv_non_retryable)
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:230:1: W293 [*] Blank line contains whitespace
    |
229 |     csv_non_retryable_tuple = tuple(csv_non_retryable)
230 |     
    | ^^^^ W293
231 |     def decorator(func: Callable) -> Callable:
232 |         @functools.wraps(func)
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:237:1: W293 [*] Blank line contains whitespace
    |
235 |             current_delay = delay
236 |             last_exception = None
237 |             
    | ^^^^^^^^^^^^ W293
238 |             while retries <= max_retries:
239 |                 try:
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:241:1: W293 [*] Blank line contains whitespace
    |
239 |                 try:
240 |                     return func(*args, **kwargs)
241 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
242 |                 except csv_non_retryable_tuple as e:
243 |                     # Immediately raise non-retryable CSV exceptions
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:249:1: W293 [*] Blank line contains whitespace
    |
247 |                     )
248 |                     raise
249 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
250 |                 except Exception as e:
251 |                     last_exception = e
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:253:1: W293 [*] Blank line contains whitespace
    |
251 |                     last_exception = e
252 |                     retries += 1
253 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
254 |                     if retries > max_retries:
255 |                         logger.error(
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:256:89: E501 Line too long (97 > 88)
    |
254 |                     if retries > max_retries:
255 |                         logger.error(
256 |                             f"CSV operation {func.__name__} failed after {max_retries} retries. "
    |                                                                                         ^^^^^^^^^ E501
257 |                             f"Final error: {type(e).__name__}: {e}"
258 |                         )
    |

src\retry_utils.py:260:1: W293 [*] Blank line contains whitespace
    |
258 |                         )
259 |                         raise last_exception
260 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
261 |                     logger.warning(
262 |                         f"CSV retry {retries}/{max_retries} for {func.__name__} after "
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:265:1: W293 [*] Blank line contains whitespace
    |
263 |                         f"{type(e).__name__}: {e}. Waiting {current_delay:.1f}s..."
264 |                     )
265 |                     
    | ^^^^^^^^^^^^^^^^^^^^ W293
266 |                     time.sleep(current_delay)
267 |                     current_delay *= 1.5  # Gentler backoff for CSV operations
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:268:1: W293 [*] Blank line contains whitespace
    |
266 |                     time.sleep(current_delay)
267 |                     current_delay *= 1.5  # Gentler backoff for CSV operations
268 |             
    | ^^^^^^^^^^^^ W293
269 |             # This should never be reached, but for safety
270 |             if last_exception:
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:273:89: E501 Line too long (104 > 88)
    |
271 |                 raise last_exception
272 |             else:
273 |                 raise RuntimeError(f"CSV operation {func.__name__} failed without raising an exception")
    |                                                                                         ^^^^^^^^^^^^^^^^ E501
274 |                 
275 |         return wrapper
    |

src\retry_utils.py:274:1: W293 [*] Blank line contains whitespace
    |
272 |             else:
273 |                 raise RuntimeError(f"CSV operation {func.__name__} failed without raising an exception")
274 |                 
    | ^^^^^^^^^^^^^^^^ W293
275 |         return wrapper
276 |     return decorator
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:283:1: W293 [*] Blank line contains whitespace
    |
281 |     # Configure logging for testing
282 |     logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
283 |     
    | ^^^^ W293
284 |     # Test non-retryable exception
285 |     @hardened_retry(max_retries=3, delay=0.1)
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:288:1: W293 [*] Blank line contains whitespace
    |
286 |     def test_non_retryable():
287 |         raise ValueError("This should not be retried")
288 |     
    | ^^^^ W293
289 |     # Test retryable exception
290 |     @hardened_retry(max_retries=3, delay=0.1)
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:296:1: W293 [*] Blank line contains whitespace
    |
294 |             raise ConnectionError("Temporary connection issue")
295 |         return "Success!"
296 |     
    | ^^^^ W293
297 |     # Test database retry
298 |     @database_retry(max_retries=2, delay=0.1)
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:304:1: W293 [*] Blank line contains whitespace
    |
302 |         else:
303 |             raise ValueError("Bad database value")
304 |     
    | ^^^^ W293
305 |     print("Testing hardened retry decorators...")
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:306:1: W293 [*] Blank line contains whitespace
    |
305 |     print("Testing hardened retry decorators...")
306 |     
    | ^^^^ W293
307 |     # Test 1: Non-retryable exception should be raised immediately
308 |     try:
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:312:1: W293 [*] Blank line contains whitespace
    |
310 |     except ValueError as e:
311 |         print(f"Γ£à Non-retryable exception raised immediately: {e}")
312 |     
    | ^^^^ W293
313 |     # Test 2: Retryable exception should be retried
314 |     try:
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:319:1: W293 [*] Blank line contains whitespace
    |
317 |     except ConnectionError as e:
318 |         print(f"Γ£à Retryable operation failed after retries: {e}")
319 |     
    | ^^^^ W293
320 |     # Test 3: Database non-retryable
321 |     try:
    |
    = help: Remove whitespace from blank line

src\retry_utils.py:325:1: W293 [*] Blank line contains whitespace
    |
323 |     except Exception as e:
324 |         print(f"Γ£à Database non-retryable exception: {type(e).__name__}: {e}")
325 |     
    | ^^^^ W293
326 |     print("Hardened retry decorator tests completed!")
    |
    = help: Remove whitespace from blank line

src\snaptrade_collector.py:11:8: F401 [*] `traceback` imported but unused
   |
 9 | import logging
10 | import sqlite3
11 | import traceback
   |        ^^^^^^^^^ F401
12 | from datetime import datetime, timezone
13 | from pathlib import Path
   |
   = help: Remove unused import: `traceback`

src\snaptrade_collector.py:14:54: F401 [*] `typing.Union` imported but unused
   |
12 | from datetime import datetime, timezone
13 | from pathlib import Path
14 | from typing import Any, Dict, List, Optional, Tuple, Union
   |                                                      ^^^^^ F401
15 |
16 | import pandas as pd
   |
   = help: Remove unused import: `typing.Union`

src\snaptrade_collector.py:108:89: E501 Line too long (107 > 88)
    |
107 |         Returns:
108 |             tuple: (data, is_list) where data is the extracted content and is_list indicates if it's a list
    |                                                                                         ^^^^^^^^^^^^^^^^^^^ E501
109 |         """
110 |         logger.info(f"≡ƒöì Analyzing SnapTrade response for {operation_name}")
    |

src\snaptrade_collector.py:132:21: F841 Local variable `data_source` is assigned to but never used
    |
130 |                 if candidate_data is not None:
131 |                     data = candidate_data
132 |                     data_source = attr
    |                     ^^^^^^^^^^^ F841
133 |                     logger.info(f"Γ£à Data extracted from response.{attr}")
134 |                     break
    |
    = help: Remove assignment to unused variable `data_source`

src\snaptrade_collector.py:145:89: E501 Line too long (90 > 88)
    |
144 |         logger.info(
145 |             f"Data type: {type(data).__name__}, Is list: {is_list}, Length: {data_length}"
    |                                                                                         ^^ E501
146 |         )
    |

src\snaptrade_collector.py:162:89: E501 Line too long (108 > 88)
    |
160 |                         )
161 |                         logger.info(
162 |                             f"           Sample values: {json.dumps(sample_values, default=str, indent=10)}"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
163 |                         )
164 |                     else:
    |

src\snaptrade_collector.py:607:89: E501 Line too long (102 > 88)
    |
605 |                         "time_executed": time_executed,
606 |                         "expiry_date": expiry_date,
607 |                         "child_brokerage_order_ids": child_brokerage_order_ids,  # Pass as Python list
    |                                                                                         ^^^^^^^^^^^^^^ E501
608 |                         "option_ticker": option_ticker,
609 |                         "option_expiry": option_expiry,
    |

src\snaptrade_collector.py:620:89: E501 Line too long (95 > 88)
    |
618 |             except Exception as e:
619 |                 logger.error(
620 |                     f"Error processing order {order.get('brokerage_order_id', 'unknown')}: {e}"
    |                                                                                         ^^^^^^^ E501
621 |                 )
622 |                 continue
    |

src\snaptrade_collector.py:649:89: E501 Line too long (93 > 88)
    |
647 |                     execute_sql(
648 |                         """
649 |                         INSERT INTO symbols (id, ticker, description, asset_type, type_code, 
    |                                                                                         ^^^^^ E501
650 |                                            exchange_code, exchange_name, exchange_mic, figi_code,
651 |                                            raw_symbol, logo_url, base_currency_code, is_supported,
    |

src\snaptrade_collector.py:649:93: W291 Trailing whitespace
    |
647 |                     execute_sql(
648 |                         """
649 |                         INSERT INTO symbols (id, ticker, description, asset_type, type_code, 
    |                                                                                             ^ W291
650 |                                            exchange_code, exchange_name, exchange_mic, figi_code,
651 |                                            raw_symbol, logo_url, base_currency_code, is_supported,
    |
    = help: Remove trailing whitespace

src\snaptrade_collector.py:650:89: E501 Line too long (97 > 88)
    |
648 |                         """
649 |                         INSERT INTO symbols (id, ticker, description, asset_type, type_code, 
650 |                                            exchange_code, exchange_name, exchange_mic, figi_code,
    |                                                                                         ^^^^^^^^^ E501
651 |                                            raw_symbol, logo_url, base_currency_code, is_supported,
652 |                                            is_quotable, is_tradable, created_at, updated_at)
    |

src\snaptrade_collector.py:651:89: E501 Line too long (98 > 88)
    |
649 |                         INSERT INTO symbols (id, ticker, description, asset_type, type_code, 
650 |                                            exchange_code, exchange_name, exchange_mic, figi_code,
651 |                                            raw_symbol, logo_url, base_currency_code, is_supported,
    |                                                                                         ^^^^^^^^^^ E501
652 |                                            is_quotable, is_tradable, created_at, updated_at)
653 |                         VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    |

src\snaptrade_collector.py:652:89: E501 Line too long (92 > 88)
    |
650 |                                            exchange_code, exchange_name, exchange_mic, figi_code,
651 |                                            raw_symbol, logo_url, base_currency_code, is_supported,
652 |                                            is_quotable, is_tradable, created_at, updated_at)
    |                                                                                         ^^^^ E501
653 |                         VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
654 |                         ON CONFLICT (id) DO UPDATE SET
    |

src\snaptrade_collector.py:653:89: E501 Line too long (99 > 88)
    |
651 |                                            raw_symbol, logo_url, base_currency_code, is_supported,
652 |                                            is_quotable, is_tradable, created_at, updated_at)
653 |                         VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    |                                                                                         ^^^^^^^^^^^ E501
654 |                         ON CONFLICT (id) DO UPDATE SET
655 |                             ticker = EXCLUDED.ticker,
    |

src\snaptrade_collector.py:953:89: E501 Line too long (92 > 88)
    |
951 |         for _, row in orders_df.iterrows():
952 |             try:
953 |                 # Use symbol field (canonical normalized ticker) instead of extracted_symbol
    |                                                                                         ^^^^ E501
954 |                 symbol_val = str(row["symbol"]) if row["symbol"] is not None else None
955 |                 if symbol_val and symbol_val != "Unknown":
    |

src\snaptrade_collector.py:977:89: E501 Line too long (97 > 88)
    |
976 |     def get_stored_positions(self) -> pd.DataFrame:
977 |         """Return all portfolio positions as a DataFrame from the latest sync in the database."""
    |                                                                                         ^^^^^^^^^ E501
978 |         from src.db import execute_sql
    |

src\snaptrade_collector.py:983:89: E501 Line too long (127 > 88)
    |
981 |             # Get positions from the most recent sync timestamp
982 |             query = """
983 |             SELECT symbol, quantity, equity, price, average_buy_price, asset_type, currency, sync_timestamp, calculated_equity 
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
984 |             FROM positions 
985 |             WHERE sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions)
    |

src\snaptrade_collector.py:983:127: W291 Trailing whitespace
    |
981 |             # Get positions from the most recent sync timestamp
982 |             query = """
983 |             SELECT symbol, quantity, equity, price, average_buy_price, asset_type, currency, sync_timestamp, calculated_equity 
    |                                                                                                                               ^ W291
984 |             FROM positions 
985 |             WHERE sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions)
    |
    = help: Remove trailing whitespace

src\snaptrade_collector.py:984:27: W291 Trailing whitespace
    |
982 |             query = """
983 |             SELECT symbol, quantity, equity, price, average_buy_price, asset_type, currency, sync_timestamp, calculated_equity 
984 |             FROM positions 
    |                           ^ W291
985 |             WHERE sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions)
986 |             ORDER BY equity DESC
    |
    = help: Remove trailing whitespace

src\snaptrade_collector.py:1014:89: E501 Line too long (127 > 88)
     |
1012 |             # Get the most recent position for this symbol
1013 |             query = """
1014 |             SELECT symbol, quantity, equity, price, average_buy_price, asset_type, currency, sync_timestamp, calculated_equity 
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1015 |             FROM positions 
1016 |             WHERE symbol = ? AND sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions WHERE symbol = ?)
     |

src\snaptrade_collector.py:1014:127: W291 Trailing whitespace
     |
1012 |             # Get the most recent position for this symbol
1013 |             query = """
1014 |             SELECT symbol, quantity, equity, price, average_buy_price, asset_type, currency, sync_timestamp, calculated_equity 
     |                                                                                                                               ^ W291
1015 |             FROM positions 
1016 |             WHERE symbol = ? AND sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions WHERE symbol = ?)
     |
     = help: Remove trailing whitespace

src\snaptrade_collector.py:1015:27: W291 Trailing whitespace
     |
1013 |             query = """
1014 |             SELECT symbol, quantity, equity, price, average_buy_price, asset_type, currency, sync_timestamp, calculated_equity 
1015 |             FROM positions 
     |                           ^ W291
1016 |             WHERE symbol = ? AND sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions WHERE symbol = ?)
1017 |             """
     |
     = help: Remove trailing whitespace

src\snaptrade_collector.py:1016:89: E501 Line too long (110 > 88)
     |
1014 |             SELECT symbol, quantity, equity, price, average_buy_price, asset_type, currency, sync_timestamp, calculated_equity 
1015 |             FROM positions 
1016 |             WHERE symbol = ? AND sync_timestamp = (SELECT MAX(sync_timestamp) FROM positions WHERE symbol = ?)
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^ E501
1017 |             """
1018 |             result = execute_sql(query, (symbol, symbol), fetch_results=True)
     |

src\snaptrade_collector.py:1039:89: E501 Line too long (93 > 88)
     |
1037 |     def extract_symbol_from_order_data(self, order: Dict) -> str:
1038 |         """
1039 |         Extract clean symbol from SnapTrade order structure with enhanced fallback hierarchy.
     |                                                                                         ^^^^^ E501
1040 |
1041 |         Priority:
     |

src\supabase_writers.py:4:89: E501 Line too long (94 > 88)
  |
2 | """
3 | Direct Supabase Data Writers
4 | Provides functions to write data directly to Supabase from Discord, SnapTrade, and price APIs.
  |                                                                                         ^^^^^^ E501
5 | """
  |

src\supabase_writers.py:8:8: F401 [*] `json` imported but unused
   |
 7 | import logging
 8 | import json
   |        ^^^^ F401
 9 | from datetime import datetime
10 | from typing import Dict, List, Optional, Any
   |
   = help: Remove unused import: `json`

src\supabase_writers.py:10:42: F401 [*] `typing.Any` imported but unused
   |
 8 | import json
 9 | from datetime import datetime
10 | from typing import Dict, List, Optional, Any
   |                                          ^^^ F401
11 | from pathlib import Path
   |
   = help: Remove unused import: `typing.Any`

src\supabase_writers.py:11:21: F401 [*] `pathlib.Path` imported but unused
   |
 9 | from datetime import datetime
10 | from typing import Dict, List, Optional, Any
11 | from pathlib import Path
   |                     ^^^^ F401
12 |
13 | from src.db import get_sync_engine
   |
   = help: Remove unused import: `pathlib.Path`

src\supabase_writers.py:27:89: E501 Line too long (92 > 88)
   |
25 |     def write_position_data(self, positions_data: List[Dict]) -> bool:
26 |         """
27 |         Write position data directly to Supabase using the correct schema from 001_base.sql.
   |                                                                                         ^^^^ E501
28 |
29 |         Args:
   |

src\supabase_writers.py:63:89: E501 Line too long (94 > 88)
   |
61 |                     open_pnl = position.get("open_pnl")
62 |                     if open_pnl is None and price and avg_buy_price and quantity:
63 |                         # Calculate unrealized P/L: (current_price - avg_buy_price) * quantity
   |                                                                                         ^^^^^^ E501
64 |                         open_pnl = (price - avg_buy_price) * quantity
65 |                     else:
   |

src\supabase_writers.py:75:89: E501 Line too long (92 > 88)
   |
73 |                             """
74 |                         INSERT INTO positions (
75 |                             account_id, symbol, symbol_description, quantity, price, equity,
   |                                                                                         ^^^^ E501
76 |                             average_buy_price, open_pnl, asset_type, currency, logo_url,
77 |                             sync_timestamp, calculated_equity, created_at, updated_at,
   |

src\supabase_writers.py:78:89: E501 Line too long (89 > 88)
   |
76 |                             average_buy_price, open_pnl, asset_type, currency, logo_url,
77 |                             sync_timestamp, calculated_equity, created_at, updated_at,
78 |                             symbol_id, exchange_code, exchange_name, mic_code, figi_code,
   |                                                                                         ^ E501
79 |                             is_quotable, is_tradable
80 |                         ) VALUES (
   |

src\supabase_writers.py:81:89: E501 Line too long (98 > 88)
   |
79 |                             is_quotable, is_tradable
80 |                         ) VALUES (
81 |                             :account_id, :symbol, :symbol_description, :quantity, :price, :equity,
   |                                                                                         ^^^^^^^^^^ E501
82 |                             :average_buy_price, :open_pnl, :asset_type, :currency, :logo_url,
83 |                             :sync_timestamp, :calculated_equity, :created_at, :updated_at,
   |

src\supabase_writers.py:82:89: E501 Line too long (93 > 88)
   |
80 |                         ) VALUES (
81 |                             :account_id, :symbol, :symbol_description, :quantity, :price, :equity,
82 |                             :average_buy_price, :open_pnl, :asset_type, :currency, :logo_url,
   |                                                                                         ^^^^^ E501
83 |                             :sync_timestamp, :calculated_equity, :created_at, :updated_at,
84 |                             :symbol_id, :exchange_code, :exchange_name, :mic_code, :figi_code,
   |

src\supabase_writers.py:83:89: E501 Line too long (90 > 88)
   |
81 | ΓÇª                     :account_id, :symbol, :symbol_description, :quantity, :price, :equity,
82 | ΓÇª                     :average_buy_price, :open_pnl, :asset_type, :currency, :logo_url,
83 | ΓÇª                     :sync_timestamp, :calculated_equity, :created_at, :updated_at,
   |                                                                                   ^^ E501
84 | ΓÇª                     :symbol_id, :exchange_code, :exchange_name, :mic_code, :figi_code,
85 | ΓÇª                     :is_quotable, :is_tradable
   |

src\supabase_writers.py:84:89: E501 Line too long (94 > 88)
   |
82 |                             :average_buy_price, :open_pnl, :asset_type, :currency, :logo_url,
83 |                             :sync_timestamp, :calculated_equity, :created_at, :updated_at,
84 |                             :symbol_id, :exchange_code, :exchange_name, :mic_code, :figi_code,
   |                                                                                         ^^^^^^ E501
85 |                             :is_quotable, :is_tradable
86 |                         )
   |

src\supabase_writers.py:115:29: F601 Dictionary key literal `"created_at"` repeated
    |
113 |                             "is_tradable": symbol_data.get("is_tradable", True)
114 |                             or self._safe_decimal(position.get("equity", 0)),
115 |                             "created_at": datetime.now(),
    |                             ^^^^^^^^^^^^ F601
116 |                         },
117 |                     )
    |
    = help: Remove repeated key literal `"created_at"`

src\supabase_writers.py:120:88: E501 Line too long (95 > 88)
    |
119 |                 logger.info(
120 |                     f"Γ£à Wrote {len(positions_data)} positions to Supabase with correct schema"
    |                                                                                         ^^^^^^^ E501
121 |                 )
122 |                 return True
    |

src\supabase_writers.py:191:25: E722 Do not use bare `except`
    |
189 |                                 json.loads(child_order_ids) if child_order_ids else []
190 |                             )
191 |                         except:
    |                         ^^^^^^ E722
192 |                             child_order_ids = (
193 |                                 [child_order_ids] if child_order_ids else []
    |

src\supabase_writers.py:204:89: E501 Line too long (125 > 88)
    |
202 |                         "status": str(order.get("status", "UNKNOWN")).upper(),
203 |                         "symbol": canonical_symbol,  # Use canonical normalized ticker
204 |                         "extracted_symbol": canonical_symbol,  # Keep for backward compatibility but populate with same value
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
205 |                         "action": str(order.get("action", "UNKNOWN")).upper(),
206 |                         "total_quantity": self._safe_decimal(
    |

src\supabase_writers.py:249:89: E501 Line too long (101 > 88)
    |
247 |                             """
248 |                         INSERT INTO orders (
249 |                             account_id, brokerage_order_id, status, symbol, extracted_symbol, action,
    |                                                                                         ^^^^^^^^^^^^^ E501
250 |                             total_quantity, open_quantity, canceled_quantity, filled_quantity, 
251 |                             execution_price, limit_price, stop_price, order_type, time_in_force, 
    |

src\supabase_writers.py:250:89: E501 Line too long (95 > 88)
    |
248 |                         INSERT INTO orders (
249 |                             account_id, brokerage_order_id, status, symbol, extracted_symbol, action,
250 |                             total_quantity, open_quantity, canceled_quantity, filled_quantity, 
    |                                                                                         ^^^^^^^ E501
251 |                             execution_price, limit_price, stop_price, order_type, time_in_force, 
252 |                             time_placed, time_updated, time_executed, expiry_date,
    |

src\supabase_writers.py:250:95: W291 Trailing whitespace
    |
248 |                         INSERT INTO orders (
249 |                             account_id, brokerage_order_id, status, symbol, extracted_symbol, action,
250 |                             total_quantity, open_quantity, canceled_quantity, filled_quantity, 
    |                                                                                               ^ W291
251 |                             execution_price, limit_price, stop_price, order_type, time_in_force, 
252 |                             time_placed, time_updated, time_executed, expiry_date,
    |
    = help: Remove trailing whitespace

src\supabase_writers.py:251:89: E501 Line too long (97 > 88)
    |
249 | ΓÇª                     account_id, brokerage_order_id, status, symbol, extracted_symbol, action,
250 | ΓÇª                     total_quantity, open_quantity, canceled_quantity, filled_quantity, 
251 | ΓÇª                     execution_price, limit_price, stop_price, order_type, time_in_force, 
    |                                                                                   ^^^^^^^^^ E501
252 | ΓÇª                     time_placed, time_updated, time_executed, expiry_date,
253 | ΓÇª                     universal_symbol, quote_universal_symbol, option_symbol, quote_currency,
    |

src\supabase_writers.py:251:97: W291 Trailing whitespace
    |
249 | ΓÇª                     account_id, brokerage_order_id, status, symbol, extracted_symbol, action,
250 | ΓÇª                     total_quantity, open_quantity, canceled_quantity, filled_quantity, 
251 | ΓÇª                     execution_price, limit_price, stop_price, order_type, time_in_force, 
    |                                                                                           ^ W291
252 | ΓÇª                     time_placed, time_updated, time_executed, expiry_date,
253 | ΓÇª                     universal_symbol, quote_universal_symbol, option_symbol, quote_currency,
    |
    = help: Remove trailing whitespace

src\supabase_writers.py:253:89: E501 Line too long (100 > 88)
    |
251 | ΓÇª                     execution_price, limit_price, stop_price, order_type, time_in_force, 
252 | ΓÇª                     time_placed, time_updated, time_executed, expiry_date,
253 | ΓÇª                     universal_symbol, quote_universal_symbol, option_symbol, quote_currency,
    |                                                                                   ^^^^^^^^^^^^ E501
254 | ΓÇª                     child_brokerage_order_ids, option_ticker, option_expiry, option_strike, option_right,
255 | ΓÇª                     user_id, user_secret, sync_timestamp, created_at
    |

src\supabase_writers.py:254:89: E501 Line too long (113 > 88)
    |
252 |                             time_placed, time_updated, time_executed, expiry_date,
253 |                             universal_symbol, quote_universal_symbol, option_symbol, quote_currency,
254 |                             child_brokerage_order_ids, option_ticker, option_expiry, option_strike, option_right,
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
255 |                             user_id, user_secret, sync_timestamp, created_at
256 |                         ) VALUES (
    |

src\supabase_writers.py:257:89: E501 Line too long (107 > 88)
    |
255 |                             user_id, user_secret, sync_timestamp, created_at
256 |                         ) VALUES (
257 |                             :account_id, :brokerage_order_id, :status, :symbol, :extracted_symbol, :action,
    |                                                                                         ^^^^^^^^^^^^^^^^^^^ E501
258 |                             :total_quantity, :open_quantity, :canceled_quantity, :filled_quantity,
259 |                             :execution_price, :limit_price, :stop_price, :order_type, :time_in_force,
    |

src\supabase_writers.py:258:89: E501 Line too long (98 > 88)
    |
256 |                         ) VALUES (
257 |                             :account_id, :brokerage_order_id, :status, :symbol, :extracted_symbol, :action,
258 |                             :total_quantity, :open_quantity, :canceled_quantity, :filled_quantity,
    |                                                                                         ^^^^^^^^^^ E501
259 |                             :execution_price, :limit_price, :stop_price, :order_type, :time_in_force,
260 |                             :time_placed, :time_updated, :time_executed, :expiry_date,
    |

src\supabase_writers.py:259:89: E501 Line too long (101 > 88)
    |
257 | ΓÇª                     :account_id, :brokerage_order_id, :status, :symbol, :extracted_symbol, :action,
258 | ΓÇª                     :total_quantity, :open_quantity, :canceled_quantity, :filled_quantity,
259 | ΓÇª                     :execution_price, :limit_price, :stop_price, :order_type, :time_in_force,
    |                                                                                   ^^^^^^^^^^^^^ E501
260 | ΓÇª                     :time_placed, :time_updated, :time_executed, :expiry_date,
261 | ΓÇª                     :universal_symbol, :quote_universal_symbol, :option_symbol, :quote_currency,
    |

src\supabase_writers.py:261:89: E501 Line too long (104 > 88)
    |
259 | ΓÇª                     :execution_price, :limit_price, :stop_price, :order_type, :time_in_force,
260 | ΓÇª                     :time_placed, :time_updated, :time_executed, :expiry_date,
261 | ΓÇª                     :universal_symbol, :quote_universal_symbol, :option_symbol, :quote_currency,
    |                                                                                   ^^^^^^^^^^^^^^^^ E501
262 | ΓÇª                     :child_brokerage_order_ids, :option_ticker, :option_expiry, :option_strike, :option_right,
263 | ΓÇª                     :user_id, :user_secret, :sync_timestamp, :created_at
    |

src\supabase_writers.py:262:89: E501 Line too long (118 > 88)
    |
260 |                             :time_placed, :time_updated, :time_executed, :expiry_date,
261 |                             :universal_symbol, :quote_universal_symbol, :option_symbol, :quote_currency,
262 |                             :child_brokerage_order_ids, :option_ticker, :option_expiry, :option_strike, :option_right,
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
263 |                             :user_id, :user_secret, :sync_timestamp, :created_at
264 |                         )
    |

src\supabase_writers.py:281:88: E501 Line too long (90 > 88)
    |
280 |                 logger.info(
281 |                     f"Γ£à Wrote {len(orders_data)} orders to Supabase with enhanced schema"
    |                                                                                         ^^ E501
282 |                 )
283 |                 return True
    |

src\supabase_writers.py:348:88: E501 Line too long (92 > 88)
    |
347 |                 logger.debug(
348 |                     f"Γ£à Wrote Discord message {message_data.get('message_id')} to Supabase"
    |                                                                                         ^^^^ E501
349 |                 )
350 |                 return True
    |

src\supabase_writers.py:378:89: E501 Line too long (96 > 88)
    |
376 |                             """
377 |                         INSERT INTO realtime_prices (
378 |                             symbol, timestamp, price, previous_close, abs_change, percent_change
    |                                                                                         ^^^^^^^^ E501
379 |                         ) VALUES (
380 |                             :symbol, :timestamp, :price, :previous_close, :abs_change, :percent_change
    |

src\supabase_writers.py:380:89: E501 Line too long (102 > 88)
    |
378 |                             symbol, timestamp, price, previous_close, abs_change, percent_change
379 |                         ) VALUES (
380 |                             :symbol, :timestamp, :price, :previous_close, :abs_change, :percent_change
    |                                                                                         ^^^^^^^^^^^^^^ E501
381 |                         )
382 |                         ON CONFLICT (symbol, timestamp) DO UPDATE SET
    |

src\twitter_analysis.py:76:89: E501 Line too long (95 > 88)
   |
74 |         data = {
75 |             "tweet_id": tid,
76 |             "source_url": f"https://x.com/{user.username if user else 'unknown'}/status/{tid}",
   |                                                                                         ^^^^^^^ E501
77 |             "created_at": tweet.data.created_at,
78 |             "text": tweet.data.text,
   |

src\twitter_analysis.py:236:48: W291 Trailing whitespace
    |
234 |         execute_sql(
235 |             """
236 |             INSERT OR REPLACE INTO twitter_data 
    |                                                ^ W291
237 |             (tweet_id, discord_message_id, discord_sent_date, tweet_created_date, 
238 |              tweet_content, author_username, author_name, retweet_count, like_count, 
    |
    = help: Remove trailing whitespace

src\twitter_analysis.py:237:82: W291 Trailing whitespace
    |
235 |             """
236 |             INSERT OR REPLACE INTO twitter_data 
237 |             (tweet_id, discord_message_id, discord_sent_date, tweet_created_date, 
    |                                                                                  ^ W291
238 |              tweet_content, author_username, author_name, retweet_count, like_count, 
239 |              reply_count, quote_count, stock_tags, source_url, retrieved_at)
    |
    = help: Remove trailing whitespace

src\twitter_analysis.py:238:85: W291 Trailing whitespace
    |
236 |             INSERT OR REPLACE INTO twitter_data 
237 |             (tweet_id, discord_message_id, discord_sent_date, tweet_created_date, 
238 |              tweet_content, author_username, author_name, retweet_count, like_count, 
    |                                                                                     ^ W291
239 |              reply_count, quote_count, stock_tags, source_url, retrieved_at)
240 |             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    |
    = help: Remove trailing whitespace

src\twitter_analysis.py:261:89: E501 Line too long (102 > 88)
    |
260 |         logger.info(
261 |             f"Logged tweet {tweet_data.get('tweet_id')} to database with {len(stock_tags)} stock tags"
    |                                                                                         ^^^^^^^^^^^^^^ E501
262 |         )
    |

src\twitter_analysis.py:279:83: W291 Trailing whitespace
    |
277 |         results = execute_sql(
278 |             """
279 |             SELECT tweet_id, discord_sent_date, tweet_created_date, tweet_content, 
    |                                                                                   ^ W291
280 |                    author_username, like_count, retweet_count, source_url
281 |             FROM twitter_data 
    |
    = help: Remove trailing whitespace

src\twitter_analysis.py:281:30: W291 Trailing whitespace
    |
279 |             SELECT tweet_id, discord_sent_date, tweet_created_date, tweet_content, 
280 |                    author_username, like_count, retweet_count, source_url
281 |             FROM twitter_data 
    |                              ^ W291
282 |             WHERE stock_tags LIKE ? AND discord_sent_date > ?
283 |             ORDER BY discord_sent_date DESC
    |
    = help: Remove trailing whitespace

src\twitter_analysis.py:518:13: F401 [*] `src.db.get_connection` imported but unused
    |
516 |         from src.db import (
517 |             use_postgres as check_postgres,
518 |             get_connection,
    |             ^^^^^^^^^^^^^^ F401
519 |             execute_sql,
520 |         )
    |
    = help: Remove unused import: `src.db.get_connection`

src\twitter_analysis.py:560:61: W291 Trailing whitespace
    |
558 |                     execute_sql(
559 |                         """
560 |                         INSERT INTO twitter_data.x_posts_log 
    |                                                             ^ W291
561 |                         (tweet_id, tweet_time, discord_message_time, tweet_text, 
562 |                          tickers, author_id, conversation_id)
    |
    = help: Remove trailing whitespace

src\twitter_analysis.py:561:81: W291 Trailing whitespace
    |
559 |                         """
560 |                         INSERT INTO twitter_data.x_posts_log 
561 |                         (tweet_id, tweet_time, discord_message_time, tweet_text, 
    |                                                                                 ^ W291
562 |                          tickers, author_id, conversation_id)
563 |                         VALUES (%s, %s, %s, %s, %s, %s, %s)
    |
    = help: Remove trailing whitespace

src\twitter_analysis.py:593:89: E501 Line too long (94 > 88)
    |
591 |                     placeholders = ",".join("?" * len(tweet_ids))
592 |                     execute_sql(
593 |                         f"DELETE FROM twitter_x_posts_log WHERE tweet_id IN ({placeholders})",
    |                                                                                         ^^^^^^ E501
594 |                         tweet_ids,
595 |                     )
    |

src\twitter_analysis.py:601:56: W291 Trailing whitespace
    |
599 |                     execute_sql(
600 |                         """
601 |                         INSERT INTO twitter_x_posts_log 
    |                                                        ^ W291
602 |                         (tweet_id, tweet_time, discord_message_time, tweet_text, 
603 |                          tickers, author_id, conversation_id)
    |
    = help: Remove trailing whitespace

src\twitter_analysis.py:602:81: W291 Trailing whitespace
    |
600 |                         """
601 |                         INSERT INTO twitter_x_posts_log 
602 |                         (tweet_id, tweet_time, discord_message_time, tweet_text, 
    |                                                                                 ^ W291
603 |                          tickers, author_id, conversation_id)
604 |                         VALUES (?, ?, ?, ?, ?, ?, ?)
    |
    = help: Remove trailing whitespace

Found 633 errors.
[*] 339 fixable with the `--fix` option (111 hidden fixes can be enabled with the `--unsafe-fixes` option).
